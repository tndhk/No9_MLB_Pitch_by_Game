2025-03-28 12:47:57,072 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 12:47:57,074 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 12:47:57,075 - root - ERROR - アプリケーション実行中にエラーが発生しました: local variable 'StreamlitApp' referenced before assignment
Traceback (most recent call last):
  File "/app/app.py", line 50, in main
    app = factory.create_streamlit_app()
  File "/app/src/service_factory.py", line 120, in create_streamlit_app
    if StreamlitApp is None:
UnboundLocalError: local variable 'StreamlitApp' referenced before assignment
2025-03-28 12:50:41,475 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 12:50:41,476 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 12:50:41,480 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 12:50:41,480 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 12:50:41,480 - root - ERROR - アプリケーション実行中にエラーが発生しました: local variable 'StreamlitApp' referenced before assignment
Traceback (most recent call last):
  File "/app/app.py", line 50, in main
    app = factory.create_streamlit_app()
  File "/app/src/service_factory.py", line 120, in create_streamlit_app
    if StreamlitApp is None:
UnboundLocalError: local variable 'StreamlitApp' referenced before assignment
2025-03-28 12:50:41,481 - root - ERROR - アプリケーション実行中にエラーが発生しました: local variable 'StreamlitApp' referenced before assignment
Traceback (most recent call last):
  File "/app/app.py", line 50, in main
    app = factory.create_streamlit_app()
  File "/app/src/service_factory.py", line 120, in create_streamlit_app
    if StreamlitApp is None:
UnboundLocalError: local variable 'StreamlitApp' referenced before assignment
2025-03-28 12:52:22,539 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 12:52:22,543 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 12:52:22,544 - root - ERROR - アプリケーション実行中にエラーが発生しました: local variable 'StreamlitApp' referenced before assignment
Traceback (most recent call last):
  File "/app/app.py", line 50, in main
    app = factory.create_streamlit_app()
  File "/app/src/service_factory.py", line 120, in create_streamlit_app
    from src.presentation.streamlit_app import StreamlitApp
UnboundLocalError: local variable 'StreamlitApp' referenced before assignment
2025-03-28 12:53:27,424 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 12:53:27,426 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 12:53:27,428 - root - ERROR - アプリケーション実行中にエラーが発生しました: local variable 'StreamlitApp' referenced before assignment
Traceback (most recent call last):
  File "/app/app.py", line 50, in main
    app = factory.create_streamlit_app()
  File "/app/src/service_factory.py", line 120, in create_streamlit_app
    from src.presentation.streamlit_app import StreamlitApp
UnboundLocalError: local variable 'StreamlitApp' referenced before assignment
2025-03-28 12:56:00,416 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 12:56:00,418 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 12:56:00,419 - root - ERROR - アプリケーション実行中にエラーが発生しました: local variable 'StreamlitApp' referenced before assignment
Traceback (most recent call last):
  File "/app/app.py", line 50, in main
    app = factory.create_streamlit_app()
  File "/app/src/service_factory.py", line 120, in create_streamlit_app
    Streamlitアプリケーションのインスタンス
UnboundLocalError: local variable 'StreamlitApp' referenced before assignment
2025-03-28 12:59:55,227 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 12:59:55,231 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 12:59:55,231 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 12:59:55,232 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 12:59:55,242 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 12:59:55,245 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 12:59:55,246 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 12:59:55,247 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 12:59:55,248 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 12:59:55,249 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 12:59:55,249 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:00:00,604 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:00:00,610 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:00:00,611 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:00:00,615 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:00:00,630 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:00:00,631 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:00:00,631 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:00:00,632 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:00:00,634 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:00:00,635 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:00:00,636 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:00:00,654 - src.presentation.streamlit_app - INFO - 投手名「Shohei Ohtani」で検索を実行
2025-03-28 13:00:00,656 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 13:00:00,659 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 13:00:00,669 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:00:01,261 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:00:01,261 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:00:01,428 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:00:01,643 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:00:01,862 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:00:02,080 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:00:02,299 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:00:02,461 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:00:02,692 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:00:02,911 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:00:03,076 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:00:03,241 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:00:03,466 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:00:03,690 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:00:03,912 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:00:04,180 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:00:04,351 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:00:04,518 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:00:04,738 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:00:04,957 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:00:05,132 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:00:05,343 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:00:05,514 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:00:05,753 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:00:05,923 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:00:06,139 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:00:06,312 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:00:06,485 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:00:06,651 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:00:06,871 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:00:07,089 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:00:07,253 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 13:00:07,480 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:00:07,490 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 13:00:09,283 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:00:09,893 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:00:09,894 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:00:09,904 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:00:09,916 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:00:09,917 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:00:09,918 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:00:09,920 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:00:09,929 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:00:09,930 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:00:09,931 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:00:22,335 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:00:22,338 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:00:22,338 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:00:22,340 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:00:22,344 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:00:22,345 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:00:22,345 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:00:22,345 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:00:22,347 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:00:22,348 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:00:22,348 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:00:22,354 - src.presentation.streamlit_app - INFO - 投手名「Shohei Ohtani」で検索を実行
2025-03-28 13:00:22,355 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 13:00:22,355 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 13:00:22,356 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:00:22,857 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:00:22,859 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:00:23,042 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:00:23,161 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:00:23,280 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:00:23,400 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:00:23,522 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:00:23,694 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:00:23,812 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:00:23,931 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:00:24,107 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:00:24,279 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:00:24,395 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:00:24,514 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:00:24,633 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:00:24,752 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:00:24,924 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:00:25,094 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:00:25,212 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:00:25,333 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:00:25,503 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:00:25,621 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:00:25,793 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:00:25,910 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:00:26,081 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:00:26,205 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:00:26,374 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:00:26,547 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:00:26,718 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:00:26,839 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:00:26,961 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:00:27,079 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 13:00:27,196 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:00:27,213 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 13:00:28,579 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:00:28,580 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:00:28,581 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:00:28,581 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:00:28,583 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:00:28,584 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:00:28,584 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:00:28,584 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:00:28,585 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:00:28,585 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:00:28,585 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:00:32,329 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:00:32,331 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:00:32,331 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:00:32,332 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:00:32,336 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:00:32,336 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:00:32,337 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:00:32,337 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:00:32,338 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:00:32,338 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:00:32,339 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:00:32,343 - src.presentation.streamlit_app - INFO - 投手名「Imanaga」で検索を実行
2025-03-28 13:00:32,346 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 13:00:32,347 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 13:00:32,348 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:00:32,812 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:00:32,814 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:00:32,933 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:00:33,051 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:00:33,167 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:00:33,286 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:00:33,402 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:00:33,515 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:00:33,632 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:00:33,748 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:00:33,860 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:00:33,973 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:00:34,088 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:00:34,207 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:00:34,325 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:00:34,444 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:00:34,563 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:00:34,683 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:00:34,801 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:00:34,916 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:00:35,035 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:00:35,151 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:00:35,265 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:00:35,380 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:00:35,497 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:00:35,615 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:00:35,733 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:00:35,851 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:00:35,969 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:00:36,088 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:00:36,203 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:00:36,317 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 13:00:36,550 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:00:36,564 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 13:00:40,369 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:00:40,372 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:00:40,372 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:00:40,374 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:00:40,377 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:00:40,378 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:00:40,379 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:00:40,379 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:00:40,380 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:00:40,381 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:00:40,381 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:00:42,544 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:00:42,546 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:00:42,546 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:00:42,547 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:00:42,550 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:00:42,550 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:00:42,551 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:00:42,551 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:00:42,552 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:00:42,553 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:00:42,553 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:00:42,557 - src.presentation.streamlit_app - INFO - 投手名「Imanaga」で検索を実行
2025-03-28 13:00:42,559 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 13:00:42,560 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 13:00:42,561 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:00:43,024 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:00:43,025 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:00:43,142 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:00:43,260 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:00:43,379 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:00:43,498 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:00:43,614 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:00:43,732 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:00:43,850 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:00:43,967 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:00:44,086 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:00:44,203 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:00:44,321 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:00:44,439 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:00:44,557 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:00:44,675 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:00:44,787 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:00:44,901 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:00:45,015 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:00:45,128 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:00:45,244 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:00:45,364 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:00:45,480 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:00:45,595 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:00:45,709 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:00:45,824 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:00:45,939 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:00:46,061 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:00:46,178 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:00:46,295 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:00:46,413 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:00:46,529 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 13:00:46,644 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:00:46,659 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 13:01:03,454 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:01:03,459 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:01:03,460 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:01:03,466 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:01:03,475 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:01:03,476 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:01:03,476 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:01:03,477 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:01:03,479 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:01:03,479 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:01:03,479 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:27:39,318 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:27:39,325 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:27:39,325 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:27:39,330 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:27:39,336 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:27:39,337 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:27:39,338 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:27:39,338 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:27:39,341 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:27:39,342 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:27:39,343 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:27:44,995 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:27:44,998 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:27:44,999 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:27:45,001 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:27:45,005 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:27:45,006 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:27:45,007 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:27:45,007 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:27:45,008 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:27:45,008 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:27:45,009 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:27:45,013 - src.presentation.streamlit_app - INFO - 投手名「Imanaga」で検索を実行
2025-03-28 13:27:45,016 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 13:27:45,017 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 13:27:45,017 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:27:45,580 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:27:45,582 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:27:45,768 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:27:45,951 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:27:46,138 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:27:46,325 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:27:46,517 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:27:46,703 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:27:46,888 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:27:47,075 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:27:47,263 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:27:47,449 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:27:47,639 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:27:47,825 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:27:48,010 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:27:48,193 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:27:48,380 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:27:48,565 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:27:48,799 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:27:49,034 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:27:49,219 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:27:49,458 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:27:49,642 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:27:49,878 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:27:50,065 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:27:50,301 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:27:50,488 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:27:50,675 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:27:50,863 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:27:51,148 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:27:51,388 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:27:51,622 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 13:27:51,857 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:27:51,871 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 13:28:00,174 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:28:00,182 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:28:00,183 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:28:00,187 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:28:00,192 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:28:00,193 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:28:00,194 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:28:00,195 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:28:00,199 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:28:00,199 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:28:00,200 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:29:19,854 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:29:19,860 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:29:19,861 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:29:19,863 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:29:19,885 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:29:19,886 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:29:19,887 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:29:19,888 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:29:19,890 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:29:19,890 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:29:19,891 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:29:28,551 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:29:28,553 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:29:28,553 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:29:28,555 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:29:28,558 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:29:28,559 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:29:28,559 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:29:28,559 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:29:28,560 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:29:28,561 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:29:28,561 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:29:28,567 - src.presentation.streamlit_app - INFO - 投手名「Imanaga」で検索を実行
2025-03-28 13:29:28,568 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 13:29:28,569 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 13:29:28,569 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:29:29,102 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:29:29,103 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:29:29,275 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:29:29,446 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:29:29,621 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:29:29,793 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:29:29,965 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:29:30,143 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:29:30,312 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:29:30,488 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:29:30,661 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:29:30,834 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:29:31,012 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:29:31,190 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:29:31,358 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:29:31,584 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:29:31,755 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:29:31,930 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:29:32,105 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:29:32,276 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:29:32,454 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:29:32,626 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:29:32,795 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:29:32,969 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:29:33,140 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:29:33,308 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:29:33,478 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:29:33,649 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:29:33,817 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:29:33,981 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:29:34,147 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:29:34,315 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 13:29:34,483 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:29:34,491 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 13:29:42,268 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:29:42,273 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:29:42,274 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:29:42,277 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:29:42,281 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:29:42,282 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:29:42,283 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:29:42,284 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:29:42,286 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:29:42,286 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:29:42,287 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:30:06,639 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:30:06,642 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:30:06,643 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:30:06,651 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:30:06,656 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:30:06,657 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:30:06,657 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:30:06,658 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:30:06,660 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:30:06,660 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:30:06,661 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:30:06,669 - src.presentation.streamlit_app - INFO - 投手名「Shohei」で検索を実行
2025-03-28 13:30:06,671 - src.application.usecases - INFO - 投手名 'Shohei' で検索します
2025-03-28 13:30:06,672 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei' で検索しています
2025-03-28 13:30:06,673 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:30:07,157 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:30:07,160 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:30:07,280 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:30:07,397 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:30:07,517 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:30:07,640 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:30:07,758 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:30:07,876 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:30:07,997 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:30:08,115 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:30:08,232 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:30:08,351 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:30:08,477 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:30:08,606 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:30:08,722 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:30:08,842 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:30:08,962 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:30:09,078 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:30:09,201 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:30:09,323 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:30:09,445 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:30:09,563 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:30:09,679 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:30:09,797 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:30:09,914 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:30:10,032 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:30:10,150 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:30:10,270 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:30:10,392 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:30:10,515 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:30:10,633 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:30:10,751 - src.infrastructure.mlb_stats_client - INFO - 'Shohei'の検索結果: 1件
2025-03-28 13:30:10,975 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:30:10,988 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 13:30:12,048 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:30:12,050 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:30:12,051 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:30:12,051 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:30:12,055 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:30:12,056 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:30:12,057 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:30:12,058 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:30:12,059 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:30:12,060 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:30:12,060 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:36:27,789 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:36:27,791 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:36:27,791 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:36:27,792 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:36:27,806 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:36:27,807 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:36:27,809 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:36:27,810 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:36:27,813 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:36:27,814 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:36:27,814 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:36:31,421 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:36:31,426 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:36:31,428 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:36:31,435 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:36:31,439 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:36:31,440 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:36:31,440 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:36:31,441 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:36:31,443 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:36:31,443 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:36:31,444 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:36:31,456 - src.presentation.streamlit_app - INFO - 投手名「Imanaga」で検索を実行
2025-03-28 13:36:31,458 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 13:36:31,460 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 13:36:31,462 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:36:32,020 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:36:32,021 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:36:32,200 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:36:32,380 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:36:32,614 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:36:32,843 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:36:33,074 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:36:33,252 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:36:33,485 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:36:33,713 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:36:33,892 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:36:34,071 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:36:34,300 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:36:34,528 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:36:34,754 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:36:34,981 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:36:35,155 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:36:35,332 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:36:35,561 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:36:35,795 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:36:35,975 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:36:36,201 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:36:36,380 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:36:36,607 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:36:36,784 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:36:37,016 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:36:37,192 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:36:37,378 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:36:37,554 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:36:37,781 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:36:38,014 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:36:38,241 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 13:36:38,483 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:36:38,497 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 13:36:42,895 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:36:42,898 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:36:42,898 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:36:42,899 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:36:42,905 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:36:42,906 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:36:42,907 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:36:42,908 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:36:42,909 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:36:42,910 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:36:42,911 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:37:21,033 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:37:21,037 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:37:21,037 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:37:21,038 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:37:21,040 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:37:21,040 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:37:21,041 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:37:21,041 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:37:21,041 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:37:21,042 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:37:21,042 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:37:27,527 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:37:27,529 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:37:27,530 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:37:27,531 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:37:27,536 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:37:27,537 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:37:27,537 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:37:27,538 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:37:27,538 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:37:27,539 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:37:27,539 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:37:27,546 - src.presentation.streamlit_app - INFO - 投手名「Ohtani」で検索を実行
2025-03-28 13:37:27,548 - src.application.usecases - INFO - 投手名 'Ohtani' で検索します
2025-03-28 13:37:27,548 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Ohtani' で検索しています
2025-03-28 13:37:27,549 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:37:28,054 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:37:28,056 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:37:28,225 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:37:28,394 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:37:28,566 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:37:28,737 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:37:28,911 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:37:29,080 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:37:29,252 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:37:29,432 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:37:29,603 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:37:29,777 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:37:29,947 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:37:30,129 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:37:30,303 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:37:30,469 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:37:30,634 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:37:30,811 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:37:30,982 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:37:31,155 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:37:31,331 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:37:31,506 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:37:31,678 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:37:31,849 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:37:32,021 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:37:32,194 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:37:32,368 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:37:32,541 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:37:32,712 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:37:32,882 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:37:33,052 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:37:33,223 - src.infrastructure.mlb_stats_client - INFO - 'Ohtani'の検索結果: 1件
2025-03-28 13:37:33,445 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:37:33,459 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 13:37:35,067 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:37:35,068 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:37:35,068 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:37:35,069 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:37:35,071 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:37:35,071 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:37:35,071 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:37:35,072 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:37:35,072 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:37:35,072 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:37:35,073 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:39:32,348 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:39:32,350 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:39:32,351 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:39:32,351 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:39:32,354 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:39:32,354 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:39:32,354 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:39:32,355 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:39:32,356 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:39:32,356 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:39:32,356 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:39:42,872 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:39:42,874 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:39:42,874 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:39:42,875 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:39:42,880 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:39:42,880 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:39:42,881 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:39:42,881 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:39:42,882 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:39:42,883 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:39:42,883 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:39:42,890 - src.presentation.streamlit_app - INFO - 投手名「Imanaga」で検索を実行
2025-03-28 13:39:42,892 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 13:39:42,892 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 13:39:42,893 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:39:43,387 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:39:43,389 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:39:43,561 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:39:43,734 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:39:43,907 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:39:44,084 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:39:44,255 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:39:44,430 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:39:44,602 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:39:44,782 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:39:44,955 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:39:45,132 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:39:45,305 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:39:45,483 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:39:45,655 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:39:45,824 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:39:45,995 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:39:46,165 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:39:46,338 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:39:46,515 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:39:46,751 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:39:46,927 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:39:47,100 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:39:47,272 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:39:47,444 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:39:47,616 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:39:47,788 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:39:47,964 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:39:48,142 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:39:48,319 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:39:48,489 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:39:48,665 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 13:39:48,838 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:39:48,859 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 13:39:51,925 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:39:51,930 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:39:51,931 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:39:51,934 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:39:51,938 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:39:51,939 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:39:51,940 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:39:51,940 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:39:51,942 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:39:51,943 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:39:51,943 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:42:51,865 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:42:51,868 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:42:51,869 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:42:51,870 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:42:51,873 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:42:51,874 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:42:51,874 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:42:51,875 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:42:51,878 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:42:51,879 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:42:51,879 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:42:57,232 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:42:57,235 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:42:57,236 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:42:57,238 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:42:57,242 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:42:57,243 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:42:57,243 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:42:57,244 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:42:57,246 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:42:57,247 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:42:57,247 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:42:57,254 - src.presentation.streamlit_app - INFO - 投手名「Imanaga」で検索を実行
2025-03-28 13:42:57,255 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 13:42:57,257 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 13:42:57,257 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:42:57,750 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:42:57,752 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:42:57,919 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:42:58,086 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:42:58,312 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:42:58,480 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:42:58,646 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:42:58,818 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:42:58,989 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:42:59,165 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:42:59,337 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:42:59,512 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:42:59,682 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:42:59,863 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:43:00,034 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:43:00,205 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:43:00,377 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:43:00,546 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:43:00,720 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:43:00,893 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:43:01,076 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:43:01,247 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:43:01,421 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:43:01,596 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:43:01,767 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:43:01,940 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:43:02,111 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:43:02,285 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:43:02,461 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:43:02,630 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:43:02,800 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:43:02,969 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 13:43:03,187 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:43:03,201 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 13:43:04,765 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:43:04,768 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:43:04,769 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:43:04,770 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:43:04,773 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:43:04,774 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:43:04,775 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:43:04,775 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:43:04,776 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:43:04,777 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:43:04,777 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:43:35,231 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:43:35,236 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:43:35,237 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:43:35,240 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:43:35,252 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:43:35,253 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:43:35,253 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:43:35,254 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:43:35,256 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:43:35,257 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:43:35,257 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:43:35,266 - src.presentation.streamlit_app - INFO - 投手名「Imanaga」で検索を実行
2025-03-28 13:43:35,267 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 13:43:35,268 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 13:43:35,269 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:43:35,767 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:43:35,768 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:43:35,929 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:43:36,045 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:43:36,160 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:43:36,271 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:43:36,384 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:43:36,541 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:43:36,655 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:43:36,764 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:43:36,959 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:43:37,129 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:43:37,242 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:43:37,356 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:43:37,471 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:43:37,585 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:43:37,742 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:43:37,901 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:43:38,025 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:43:38,140 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:43:38,299 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:43:38,409 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:43:38,560 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:43:38,672 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:43:38,787 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:43:38,898 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:43:39,015 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:43:39,132 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:43:39,256 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:43:39,372 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:43:39,487 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:43:39,604 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 13:43:39,762 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:43:39,778 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 13:44:03,722 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:44:03,729 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:44:03,731 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:44:03,737 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:44:03,748 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:44:03,749 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:44:03,750 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:44:03,751 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:44:03,753 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:44:03,753 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:44:03,754 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:50:34,364 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:50:34,366 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:50:34,366 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:50:34,368 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:50:34,371 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:50:34,373 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:50:34,373 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:50:34,374 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:50:34,375 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:50:34,376 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:50:34,377 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:50:37,990 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:50:37,994 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:50:37,994 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:50:37,998 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:50:38,005 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:50:38,006 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:50:38,006 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:50:38,007 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:50:38,008 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:50:38,009 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:50:38,009 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:50:38,017 - src.presentation.streamlit_app - INFO - 投手名「Shohei Ohtani」で検索を実行
2025-03-28 13:50:38,018 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 13:50:38,019 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 13:50:38,020 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:50:38,526 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:50:38,527 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:50:38,636 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:50:38,746 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:50:38,857 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:50:38,970 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:50:39,086 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:50:39,197 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:50:39,310 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:50:39,422 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:50:39,535 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:50:39,650 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:50:39,762 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:50:39,881 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:50:39,995 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:50:40,109 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:50:40,229 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:50:40,345 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:50:40,554 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:50:40,670 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:50:40,786 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:50:40,900 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:50:41,014 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:50:41,131 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:50:41,246 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:50:41,362 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:50:41,479 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:50:41,601 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:50:41,719 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:50:41,835 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:50:41,954 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:50:42,073 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 13:50:42,309 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:50:42,324 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 13:50:43,290 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:50:43,294 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:50:43,294 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:50:43,295 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:50:43,297 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:50:43,297 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:50:43,298 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:50:43,298 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:50:43,299 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:50:43,299 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:50:43,300 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:51:53,261 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:51:53,263 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:51:53,266 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:51:53,268 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:51:53,273 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:51:53,274 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:51:53,275 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:51:53,275 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:51:53,277 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:51:53,277 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:51:53,277 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:51:56,224 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:51:56,228 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:51:56,228 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:51:56,230 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:51:56,233 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:51:56,234 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:51:56,234 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:51:56,235 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:51:56,236 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:51:56,236 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:51:56,237 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:51:56,240 - src.presentation.streamlit_app - INFO - 投手名「Shohei Ohtani」で検索を実行
2025-03-28 13:51:56,241 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 13:51:56,242 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 13:51:56,244 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:51:56,753 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:51:56,755 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:51:56,928 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:51:57,151 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:51:57,388 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:51:57,612 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:51:57,841 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:51:58,009 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:51:58,231 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:51:58,408 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:51:58,580 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:51:58,752 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:51:58,925 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:51:59,157 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:51:59,379 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:51:59,606 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:51:59,779 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:51:59,952 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:52:00,172 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:52:00,426 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:52:00,602 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:52:00,847 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:52:01,021 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:52:01,247 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:52:01,425 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:52:01,659 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:52:01,832 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:52:02,006 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:52:02,181 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:52:02,350 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:52:02,521 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:52:02,695 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 13:52:02,871 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:52:02,883 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 13:52:04,182 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:52:04,187 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:52:04,188 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:52:04,189 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:52:04,194 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:52:04,195 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:52:04,196 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:52:04,197 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:52:04,198 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:52:04,199 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:52:04,200 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:52:32,712 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:52:32,716 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:52:32,716 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:52:32,719 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:52:32,723 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:52:32,723 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:52:32,724 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:52:32,724 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:52:32,725 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:52:32,726 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:52:32,726 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:52:36,065 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:52:36,068 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:52:36,069 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:52:36,071 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:52:36,078 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:52:36,079 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:52:36,079 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:52:36,081 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:52:36,082 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:52:36,083 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:52:36,084 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:52:36,088 - src.presentation.streamlit_app - INFO - 投手名「Shohei Ohtani」で検索を実行
2025-03-28 13:52:36,089 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 13:52:36,091 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 13:52:36,092 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:52:36,602 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:52:36,604 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:52:36,723 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:52:36,834 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:52:36,949 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:52:37,063 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:52:37,181 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:52:37,295 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:52:37,409 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:52:37,523 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:52:37,634 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:52:37,746 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:52:37,865 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:52:37,976 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:52:38,084 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:52:38,197 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:52:38,314 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:52:38,429 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:52:38,549 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:52:38,661 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:52:38,772 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:52:38,889 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:52:39,000 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:52:39,114 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:52:39,230 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:52:39,342 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:52:39,456 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:52:39,570 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:52:39,690 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:52:39,805 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:52:39,918 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:52:40,032 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 13:52:40,143 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:52:40,158 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 13:52:43,186 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:52:43,190 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:52:43,190 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:52:43,191 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:52:43,196 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:52:43,196 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:52:43,197 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:52:43,198 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:52:43,199 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:52:43,199 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:52:43,200 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:53:04,464 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:53:04,466 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:53:04,466 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:53:04,467 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:53:04,469 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:53:04,470 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:53:04,470 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:53:04,470 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:53:04,471 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:53:04,471 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:53:04,471 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:53:07,081 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:53:07,084 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:53:07,084 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:53:07,085 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:53:07,088 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:53:07,089 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:53:07,089 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:53:07,089 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:53:07,090 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:53:07,090 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:53:07,090 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:53:07,095 - src.presentation.streamlit_app - INFO - 投手名「Shohei Ohtani」で検索を実行
2025-03-28 13:53:07,097 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 13:53:07,097 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 13:53:07,098 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:53:07,625 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:53:07,627 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:53:07,810 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:53:07,993 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:53:08,235 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:53:08,423 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:53:08,602 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:53:08,783 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:53:08,966 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:53:09,149 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:53:09,333 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:53:09,519 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:53:09,701 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:53:09,879 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:53:10,055 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:53:10,235 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:53:10,420 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:53:10,601 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:53:10,783 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:53:11,014 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:53:11,196 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:53:11,426 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:53:11,602 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:53:11,853 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:53:12,040 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:53:12,279 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:53:12,468 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:53:12,651 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:53:12,833 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:53:13,015 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:53:13,259 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:53:13,497 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 13:53:13,682 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:53:13,694 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 13:53:14,828 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:53:14,830 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:53:14,830 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:53:14,831 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:53:14,834 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:53:14,835 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:53:14,836 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:53:14,836 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:53:14,837 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:53:14,838 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:53:14,838 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:53:39,816 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:53:39,818 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:53:39,818 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:53:39,821 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:53:39,823 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:53:39,824 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:53:39,825 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:53:39,825 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:53:39,828 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:53:39,829 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:53:39,831 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:53:42,312 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:53:42,315 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:53:42,316 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:53:42,317 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:53:42,321 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:53:42,321 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:53:42,322 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:53:42,323 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:53:42,324 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:53:42,324 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:53:42,325 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:53:42,329 - src.presentation.streamlit_app - INFO - 投手名「Shohei Ohtani」で検索を実行
2025-03-28 13:53:42,332 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 13:53:42,333 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 13:53:42,334 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:53:42,832 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:53:42,834 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:53:43,008 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:53:43,179 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:53:43,354 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:53:43,529 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:53:43,698 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:53:43,873 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:53:44,045 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:53:44,223 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:53:44,397 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:53:44,570 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:53:44,792 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:53:44,972 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:53:45,163 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:53:45,340 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:53:45,565 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:53:45,740 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:53:45,913 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:53:46,083 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:53:46,257 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:53:46,429 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:53:46,597 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:53:46,766 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:53:46,936 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:53:47,103 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:53:47,271 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:53:47,444 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:53:47,613 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:53:47,832 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:53:48,002 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:53:48,172 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 13:53:48,291 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:53:48,306 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 13:53:50,779 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:53:50,782 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:53:50,783 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:53:50,784 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:53:50,789 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:53:50,790 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:53:50,791 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:53:50,791 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:53:50,792 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:53:50,793 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:53:50,794 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:54:06,691 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:54:06,692 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:54:06,692 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:54:06,693 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:54:06,695 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:54:06,696 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:54:06,696 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:54:06,696 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:54:06,697 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:54:06,697 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:54:06,697 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:54:09,042 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:54:09,046 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:54:09,047 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:54:09,049 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:54:09,052 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:54:09,053 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:54:09,053 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:54:09,054 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:54:09,054 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:54:09,055 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:54:09,055 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:54:09,060 - src.presentation.streamlit_app - INFO - 投手名「Shohei Ohtani」で検索を実行
2025-03-28 13:54:09,061 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 13:54:09,063 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 13:54:09,066 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:54:09,565 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:54:09,566 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:54:09,682 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:54:09,801 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:54:09,917 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:54:10,033 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:54:10,155 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:54:10,272 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:54:10,388 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:54:10,507 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:54:10,624 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:54:10,741 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:54:10,859 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:54:10,973 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:54:11,084 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:54:11,195 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:54:11,307 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:54:11,425 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:54:11,542 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:54:11,652 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:54:11,767 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:54:11,882 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:54:12,000 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:54:12,118 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:54:12,234 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:54:12,347 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:54:12,461 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:54:12,574 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:54:12,685 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:54:12,795 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:54:12,905 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:54:13,017 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 13:54:13,128 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:54:13,138 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 13:54:17,345 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:54:17,349 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:54:17,350 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:54:17,352 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:54:17,357 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:54:17,357 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:54:17,358 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:54:17,359 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:54:17,360 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:54:17,361 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:54:17,361 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:57:25,128 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:57:25,133 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:57:25,133 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:57:25,135 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:57:25,139 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:57:25,139 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:57:25,140 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:57:25,140 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:57:25,141 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:57:25,141 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:57:25,141 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:57:28,538 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:57:28,545 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:57:28,546 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:57:28,548 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:57:28,557 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:57:28,558 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:57:28,558 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:57:28,558 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:57:28,561 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:57:28,561 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:57:28,561 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 13:57:28,566 - src.presentation.streamlit_app - INFO - 投手名「Shohei Ohtani」で検索を実行
2025-03-28 13:57:28,567 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 13:57:28,568 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 13:57:28,570 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 13:57:29,180 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 13:57:29,180 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 13:57:29,355 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 13:57:29,528 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 13:57:29,703 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 13:57:29,877 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 13:57:30,051 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 13:57:30,224 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 13:57:30,395 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 13:57:30,574 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 13:57:30,753 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 13:57:30,927 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 13:57:31,098 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 13:57:31,270 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 13:57:31,441 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 13:57:31,614 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 13:57:31,790 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 13:57:31,959 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 13:57:32,133 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 13:57:32,303 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 13:57:32,474 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 13:57:32,650 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 13:57:32,832 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 13:57:33,015 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 13:57:33,186 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 13:57:33,365 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 13:57:33,540 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 13:57:33,715 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 13:57:33,890 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 13:57:34,062 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 13:57:34,232 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 13:57:34,405 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 13:57:34,633 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 13:57:34,656 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 13:57:55,976 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 13:57:55,981 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 13:57:55,982 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 13:57:55,984 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 13:57:55,989 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 13:57:55,990 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 13:57:55,990 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 13:57:55,991 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 13:57:55,993 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 13:57:55,994 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 13:57:55,995 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 14:04:56,943 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:04:56,945 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:04:56,946 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:04:56,947 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:04:56,953 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:04:56,957 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:04:56,958 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:04:56,959 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:04:56,961 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:04:56,962 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:04:56,962 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 14:04:56,969 - src.presentation.streamlit_app - INFO - render_search_interface 終了: pitcher_id=None, game_date=None
2025-03-28 14:05:03,702 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:05:03,706 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:05:03,706 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:05:03,708 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:05:03,711 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:05:03,711 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:05:03,712 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:05:03,713 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:05:03,714 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:05:03,715 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:05:03,715 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 14:05:03,720 - src.presentation.streamlit_app - INFO - 投手名「Imanaga」で検索を実行
2025-03-28 14:05:03,721 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 14:05:03,722 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 14:05:03,722 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:05:04,233 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:05:04,235 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:05:04,408 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:05:04,576 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:05:04,806 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:05:04,980 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:05:05,152 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:05:05,322 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:05:05,496 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:05:05,673 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:05:05,854 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:05:06,026 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:05:06,196 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:05:06,375 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:05:06,549 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:05:06,721 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:05:06,890 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:05:07,065 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:05:07,236 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:05:07,409 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:05:07,585 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:05:07,756 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:05:07,927 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:05:08,098 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:05:08,273 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:05:08,447 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:05:08,621 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:05:08,792 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:05:08,967 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:05:09,136 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:05:09,310 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:05:09,484 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 14:05:09,606 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:05:09,621 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 14:05:09,628 - src.presentation.streamlit_app - INFO - render_search_interface 終了: pitcher_id=None, game_date=None
2025-03-28 14:05:12,235 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:05:12,239 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:05:12,240 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:05:12,242 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:05:12,246 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:05:12,247 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:05:12,248 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:05:12,248 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:05:12,249 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:05:12,250 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:05:12,252 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 14:05:12,257 - src.presentation.streamlit_app - INFO - render_search_interface 終了: pitcher_id=None, game_date=None
2025-03-28 14:05:18,223 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:05:18,227 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:05:18,228 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:05:18,229 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:05:18,232 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:05:18,233 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:05:18,233 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:05:18,235 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:05:18,237 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:05:18,238 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:05:18,239 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 14:05:18,245 - src.presentation.streamlit_app - INFO - render_search_interface 終了: pitcher_id=None, game_date=None
2025-03-28 14:05:20,582 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:05:20,586 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:05:20,586 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:05:20,587 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:05:20,591 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:05:20,592 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:05:20,592 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:05:20,593 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:05:20,594 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:05:20,595 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:05:20,595 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 14:05:20,600 - src.presentation.streamlit_app - INFO - 投手名「Imanaga」で検索を実行
2025-03-28 14:05:20,601 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 14:05:20,601 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 14:05:20,603 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:05:21,075 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:05:21,078 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:05:21,197 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:05:21,317 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:05:21,437 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:05:21,552 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:05:21,670 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:05:21,786 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:05:21,900 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:05:22,020 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:05:22,141 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:05:22,262 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:05:22,380 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:05:22,499 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:05:22,620 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:05:22,739 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:05:22,855 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:05:22,983 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:05:23,102 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:05:23,223 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:05:23,338 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:05:23,453 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:05:23,566 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:05:23,680 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:05:23,795 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:05:23,944 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:05:24,063 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:05:24,175 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:05:24,286 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:05:24,404 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:05:24,520 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:05:24,654 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 14:05:24,772 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:05:24,786 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 14:05:24,795 - src.presentation.streamlit_app - INFO - render_search_interface 終了: pitcher_id=None, game_date=None
2025-03-28 14:05:32,189 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:05:32,197 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:05:32,199 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:05:32,201 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:05:32,205 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:05:32,206 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:05:32,206 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:05:32,207 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:05:32,208 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:05:32,208 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:05:32,209 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 14:05:32,214 - src.presentation.streamlit_app - INFO - render_search_interface 終了: pitcher_id=None, game_date=None
2025-03-28 14:06:32,529 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:06:32,534 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:06:32,535 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:06:32,537 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:06:32,541 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:06:32,542 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:06:32,542 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:06:32,543 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:06:32,544 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:06:32,545 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:06:32,545 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 14:06:32,553 - src.presentation.streamlit_app - INFO - render_search_interface 終了: pitcher_id=None, game_date=None
2025-03-28 14:06:35,391 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:06:35,392 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:06:35,393 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:06:35,394 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:06:35,398 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:06:35,398 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:06:35,399 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:06:35,400 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:06:35,400 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:06:35,401 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:06:35,401 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 14:06:35,404 - src.presentation.streamlit_app - INFO - 投手名「Shohei Ohtani」で検索を実行
2025-03-28 14:06:35,405 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 14:06:35,406 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 14:06:35,406 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:06:35,921 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:06:35,923 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:06:36,096 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:06:36,271 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:06:36,444 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:06:36,614 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:06:36,785 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:06:36,955 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:06:37,126 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:06:37,302 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:06:37,475 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:06:37,649 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:06:37,766 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:06:37,884 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:06:38,001 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:06:38,118 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:06:38,291 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:06:38,463 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:06:38,579 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:06:38,693 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:06:38,866 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:06:38,984 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:06:39,155 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:06:39,273 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:06:39,444 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:06:39,561 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:06:39,732 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:06:39,905 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:06:40,080 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:06:40,201 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:06:40,318 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:06:40,436 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 14:06:40,556 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:06:40,569 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 14:06:40,574 - src.presentation.streamlit_app - INFO - render_search_interface 終了: pitcher_id=None, game_date=None
2025-03-28 14:06:44,093 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:06:44,098 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:06:44,100 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:06:44,104 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:06:44,113 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:06:44,114 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:06:44,115 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:06:44,115 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:06:44,120 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:06:44,120 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:06:44,122 - src.presentation.streamlit_app - INFO - アプリケーションを起動します
2025-03-28 14:06:44,133 - src.presentation.streamlit_app - INFO - render_search_interface 終了: pitcher_id=None, game_date=None
2025-03-28 14:09:23,294 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:09:23,297 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:09:23,297 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:09:23,301 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:09:23,308 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:09:23,309 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:09:23,311 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:09:23,311 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:09:23,313 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:09:23,314 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:09:23,314 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:09:27,213 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:09:27,217 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:09:27,218 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:09:27,220 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:09:27,223 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:09:27,223 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:09:27,224 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:09:27,224 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:09:27,226 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:09:27,229 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:09:27,230 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:09:27,262 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:09:27,263 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:09:27,263 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:09:27,264 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:09:27,267 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:09:27,268 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:09:27,268 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:09:27,269 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:09:27,270 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:09:27,270 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:09:27,271 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:09:27,273 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 14:09:27,273 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 14:09:27,274 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:09:27,750 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:09:27,752 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:09:27,868 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:09:27,985 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:09:28,099 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:09:28,218 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:09:28,336 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:09:28,496 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:09:28,612 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:09:28,727 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:09:28,841 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:09:29,004 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:09:29,120 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:09:29,237 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:09:29,350 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:09:29,467 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:09:29,627 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:09:29,787 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:09:29,903 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:09:30,025 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:09:30,185 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:09:30,299 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:09:30,459 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:09:30,577 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:09:30,737 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:09:30,854 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:09:31,012 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:09:31,172 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:09:31,333 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:09:31,449 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:09:31,564 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:09:31,680 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 14:09:31,841 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:09:31,856 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 14:09:38,356 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:09:38,360 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:09:38,360 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:09:38,363 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:09:38,368 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:09:38,370 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:09:38,370 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:09:38,371 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:09:38,374 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:09:38,374 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:09:38,375 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:09:38,383 - src.application.usecases - INFO - 投手ID 660271 の2023シーズンの試合を取得します
2025-03-28 14:09:38,387 - src.infrastructure.data_repository - INFO - 投手ID 660271 の23試合分の情報を取得しました
2025-03-28 14:09:38,387 - src.application.usecases - INFO - キャッシュから23試合分のデータを取得しました
2025-03-28 14:09:47,428 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:09:47,433 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:09:47,433 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:09:47,436 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:09:47,442 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:09:47,443 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:09:47,444 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:09:47,445 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:09:47,446 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:09:47,447 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:09:47,447 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:09:48,581 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:09:48,584 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:09:48,585 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:09:48,586 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:09:48,589 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:09:48,590 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:09:48,591 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:09:48,592 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:09:48,593 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:09:48,594 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:09:48,601 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:09:48,611 - src.application.usecases - INFO - 投手ID 660271 の2023-07-14の試合を分析します
2025-03-28 14:09:48,616 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-28 14:09:48,616 - src.application.usecases - INFO - キャッシュにデータがないため、APIから取得します
2025-03-28 14:09:48,617 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 660271, 試合日 2023-07-14
2025-03-28 14:09:50,554 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 94行のデータ取得
2025-03-28 14:09:50,561 - src.infrastructure.data_repository - INFO - 投球データをキャッシュに保存しました: /app/data/pitch_data_660271_2023-07-14.pkl
2025-03-28 14:09:50,627 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:09:50,631 - src.presentation.data_visualizer - INFO - パフォーマンスサマリーグラフを作成
2025-03-28 14:09:51,582 - src.presentation.data_visualizer - INFO - 球種別分布グラフを作成
2025-03-28 14:09:51,915 - src.presentation.data_visualizer - INFO - イニング別球速グラフを作成
2025-03-28 14:09:52,230 - src.presentation.data_visualizer - INFO - イニング別投球分布グラフを作成
2025-03-28 14:09:52,526 - src.presentation.data_visualizer - INFO - 球種別有効性グラフを作成
2025-03-28 14:09:52,904 - src.presentation.data_visualizer - INFO - 被打球分布グラフを作成
2025-03-28 14:10:14,540 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:10:14,545 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:10:14,546 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:10:14,548 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:10:14,552 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:10:14,553 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:10:14,553 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:10:14,554 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:10:14,556 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:10:14,557 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:10:14,557 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:10:14,567 - src.application.usecases - INFO - 投手ID 660271 の2023-07-14の試合を分析します
2025-03-28 14:10:14,570 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-28 14:10:14,579 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-07-14.pkl
2025-03-28 14:10:14,626 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:10:14,630 - src.presentation.data_visualizer - INFO - パフォーマンスサマリーグラフを作成
2025-03-28 14:10:15,360 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:10:15,362 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:10:15,362 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:10:15,363 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:10:15,366 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:10:15,366 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:10:15,366 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:10:15,367 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:10:15,367 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:10:15,368 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:10:15,368 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:10:15,371 - src.application.usecases - INFO - 投手ID 660271 の2023-07-14の試合を分析します
2025-03-28 14:10:15,374 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-28 14:10:15,377 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-07-14.pkl
2025-03-28 14:10:15,398 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:10:15,400 - src.presentation.data_visualizer - INFO - パフォーマンスサマリーグラフを作成
2025-03-28 14:10:16,006 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:10:16,009 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:10:16,009 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:10:16,011 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:10:16,014 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:10:16,015 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:10:16,015 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:10:16,015 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:10:16,017 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:10:16,017 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:10:16,017 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:10:16,023 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 14:10:16,025 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 14:10:16,026 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:10:16,524 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:10:16,526 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:10:16,636 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:10:16,748 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:10:16,866 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:10:16,979 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:10:17,098 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:10:17,215 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:10:17,326 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:10:17,433 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:10:17,544 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:10:17,657 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:10:17,774 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:10:17,888 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:10:18,001 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:10:18,118 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:10:18,233 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:10:18,351 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:10:18,465 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:10:18,581 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:10:18,695 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:10:18,810 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:10:18,926 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:10:19,042 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:10:19,156 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:10:19,270 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:10:19,387 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:10:19,507 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:10:19,623 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:10:19,739 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:10:19,855 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:10:19,973 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 14:10:20,136 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:10:20,151 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 14:10:20,160 - src.application.usecases - INFO - 投手ID 660271 の2023-07-14の試合を分析します
2025-03-28 14:10:20,164 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-28 14:10:20,171 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-07-14.pkl
2025-03-28 14:10:20,210 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:10:20,214 - src.presentation.data_visualizer - INFO - パフォーマンスサマリーグラフを作成
2025-03-28 14:10:21,065 - src.presentation.data_visualizer - INFO - 球種別分布グラフを作成
2025-03-28 14:10:21,336 - src.presentation.data_visualizer - INFO - イニング別球速グラフを作成
2025-03-28 14:10:21,645 - src.presentation.data_visualizer - INFO - イニング別投球分布グラフを作成
2025-03-28 14:10:21,888 - src.presentation.data_visualizer - INFO - 球種別有効性グラフを作成
2025-03-28 14:10:22,221 - src.presentation.data_visualizer - INFO - 被打球分布グラフを作成
2025-03-28 14:10:22,509 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:10:22,511 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:10:22,512 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:10:22,513 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:10:22,517 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:10:22,517 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:10:22,518 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:10:22,518 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:10:22,519 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:10:22,519 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:10:22,520 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:10:22,526 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-28 14:10:22,530 - src.infrastructure.data_repository - INFO - 投手ID 684007 の0試合分の情報を取得しました
2025-03-28 14:10:22,530 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-28 14:10:22,531 - src.infrastructure.baseball_savant_client - INFO - 投手ID 684007の2024シーズンの試合リストを取得します
2025-03-28 14:10:22,531 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 2024シーズン全体
2025-03-28 14:10:28,962 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 2590行のデータ取得
2025-03-28 14:10:28,978 - src.infrastructure.baseball_savant_client - INFO - 29個のユニークな試合日を特定しました
2025-03-28 14:10:29,025 - src.infrastructure.baseball_savant_client - INFO - 29試合のデータを取得しました
2025-03-28 14:10:29,032 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-09-22 (投手ID: 684007)
2025-03-28 14:10:29,038 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-09-16 (投手ID: 684007)
2025-03-28 14:10:29,047 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-09-10 (投手ID: 684007)
2025-03-28 14:10:29,055 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-09-04 (投手ID: 684007)
2025-03-28 14:10:29,062 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-08-30 (投手ID: 684007)
2025-03-28 14:10:29,068 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-08-24 (投手ID: 684007)
2025-03-28 14:10:29,074 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-08-18 (投手ID: 684007)
2025-03-28 14:10:29,079 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-08-12 (投手ID: 684007)
2025-03-28 14:10:29,085 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-08-06 (投手ID: 684007)
2025-03-28 14:10:29,089 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-08-01 (投手ID: 684007)
2025-03-28 14:10:29,094 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-07-27 (投手ID: 684007)
2025-03-28 14:10:29,099 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-07-21 (投手ID: 684007)
2025-03-28 14:10:29,104 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-07-10 (投手ID: 684007)
2025-03-28 14:10:29,108 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-07-03 (投手ID: 684007)
2025-03-28 14:10:29,113 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-06-27 (投手ID: 684007)
2025-03-28 14:10:29,117 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-06-21 (投手ID: 684007)
2025-03-28 14:10:29,123 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-06-15 (投手ID: 684007)
2025-03-28 14:10:29,128 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-06-09 (投手ID: 684007)
2025-03-28 14:10:29,133 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-06-04 (投手ID: 684007)
2025-03-28 14:10:29,141 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-05-29 (投手ID: 684007)
2025-03-28 14:10:29,146 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-05-18 (投手ID: 684007)
2025-03-28 14:10:29,150 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-05-13 (投手ID: 684007)
2025-03-28 14:10:29,154 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-05-07 (投手ID: 684007)
2025-03-28 14:10:29,160 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-05-01 (投手ID: 684007)
2025-03-28 14:10:29,165 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-04-26 (投手ID: 684007)
2025-03-28 14:10:29,170 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-04-20 (投手ID: 684007)
2025-03-28 14:10:29,176 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-04-13 (投手ID: 684007)
2025-03-28 14:10:29,181 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-04-07 (投手ID: 684007)
2025-03-28 14:10:29,186 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2024-04-01 (投手ID: 684007)
2025-03-28 14:10:29,190 - src.application.usecases - INFO - 投手ID 684007 の2023-07-14の試合を分析します
2025-03-28 14:10:29,191 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:10:29,192 - src.application.usecases - INFO - キャッシュにデータがないため、APIから取得します
2025-03-28 14:10:29,193 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 試合日 2023-07-14
2025-03-28 14:10:30,561 - src.infrastructure.baseball_savant_client - WARNING - 投手ID 684007 - データが見つかりませんでした
2025-03-28 14:10:30,563 - src.application.usecases - ERROR - 投手ID 684007 の2023-07-14の試合データが取得できませんでした
2025-03-28 14:10:32,043 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:10:32,048 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:10:32,048 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:10:32,049 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:10:32,053 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:10:32,054 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:10:32,055 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:10:32,055 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:10:32,057 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:10:32,058 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:10:32,058 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:10:32,064 - src.application.usecases - INFO - 投手ID 684007 の2023-07-14の試合を分析します
2025-03-28 14:10:32,067 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:10:32,069 - src.application.usecases - INFO - キャッシュにデータがないため、APIから取得します
2025-03-28 14:10:32,070 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 試合日 2023-07-14
2025-03-28 14:10:32,174 - src.infrastructure.baseball_savant_client - WARNING - 投手ID 684007 - データが見つかりませんでした
2025-03-28 14:10:32,175 - src.application.usecases - ERROR - 投手ID 684007 の2023-07-14の試合データが取得できませんでした
2025-03-28 14:10:33,767 - __main__ - INFO - Streamlitアプリケーションを起動します
2025-03-28 14:10:33,771 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:10:33,771 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:10:33,772 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:10:33,777 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:10:33,778 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:10:33,779 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:10:33,780 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:10:33,781 - src.service_factory - INFO - DataVisualizerを作成しました
2025-03-28 14:10:33,782 - src.service_factory - INFO - Streamlitアプリケーションの作成が完了しました
2025-03-28 14:10:33,782 - src.presentation.streamlit_app - INFO - シンプルなアプリケーションを起動します
2025-03-28 14:10:33,789 - src.application.usecases - INFO - 投手ID 684007 の2024-09-16の試合を分析します
2025-03-28 14:10:33,791 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:10:33,792 - src.application.usecases - INFO - キャッシュにデータがないため、APIから取得します
2025-03-28 14:10:33,793 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 試合日 2024-09-16
2025-03-28 14:10:35,269 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 99行のデータ取得
2025-03-28 14:10:35,275 - src.infrastructure.data_repository - INFO - 投球データをキャッシュに保存しました: /app/data/pitch_data_684007_2024-09-16.pkl
2025-03-28 14:10:35,297 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:10:35,300 - src.presentation.data_visualizer - INFO - パフォーマンスサマリーグラフを作成
2025-03-28 14:10:36,084 - src.presentation.data_visualizer - INFO - 球種別分布グラフを作成
2025-03-28 14:10:36,382 - src.presentation.data_visualizer - INFO - イニング別球速グラフを作成
2025-03-28 14:10:36,694 - src.presentation.data_visualizer - INFO - イニング別投球分布グラフを作成
2025-03-28 14:10:36,949 - src.presentation.data_visualizer - INFO - 球種別有効性グラフを作成
2025-03-28 14:10:37,264 - src.presentation.data_visualizer - INFO - 被打球分布グラフを作成
2025-03-28 14:37:04,293 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:04,295 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:37:04,295 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:37:04,296 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:37:04,304 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:37:04,305 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:37:04,305 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:37:04,305 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:37:04,306 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:37:04,306 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:37:04,307 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:07,555 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:07,704 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:37:07,704 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:37:07,708 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:37:07,719 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:37:07,719 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:37:07,720 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:37:07,720 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:37:07,721 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:37:07,721 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:37:07,721 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:08,517 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:08,519 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:37:08,520 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:37:08,520 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:37:08,523 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:37:08,524 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:37:08,524 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:37:08,527 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:37:08,527 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:37:08,528 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:37:08,528 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:09,503 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:09,508 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:37:09,509 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:37:09,513 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:37:09,525 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:37:09,526 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:37:09,527 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:37:09,527 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:37:09,529 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:37:09,529 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:37:09,530 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:09,551 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 14:37:09,552 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 14:37:09,554 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:37:10,617 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:37:10,626 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:37:10,832 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:37:11,004 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:37:11,174 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:37:11,343 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:37:11,563 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:37:11,727 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:37:11,892 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:37:12,063 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:37:12,237 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:37:12,423 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:37:12,589 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:37:12,754 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:37:12,919 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:37:13,087 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:37:13,253 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:37:13,424 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:37:13,647 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:37:13,818 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:37:13,990 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:37:14,155 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:37:14,321 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:37:14,483 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:37:14,647 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:37:14,813 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:37:14,979 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:37:15,142 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:37:15,304 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:37:15,470 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:37:15,632 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:37:15,797 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 14:37:16,022 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:37:16,031 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 14:37:18,673 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:18,676 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:37:18,677 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:37:18,677 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:37:18,681 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:37:18,682 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:37:18,682 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:37:18,683 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:37:18,683 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:37:18,684 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:37:18,684 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:18,693 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-28 14:37:18,695 - src.infrastructure.data_repository - INFO - 投手ID 684007 の29試合分の情報を取得しました
2025-03-28 14:37:18,696 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-28 14:37:21,137 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:21,140 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:37:21,140 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:37:21,142 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:37:21,145 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:37:21,146 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:37:21,146 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:37:21,147 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:37:21,147 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:37:21,148 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:37:21,148 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:37:21,158 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-28 14:37:21,160 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:37:21,167 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-28 14:37:21,203 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:37:21,206 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:37:21,362 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 781, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-28 14:40:45,724 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:40:45,728 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:40:45,728 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:40:45,730 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:40:45,733 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:40:45,734 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:40:45,734 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:40:45,734 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:40:45,735 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:40:45,735 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:40:45,735 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:40:45,743 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-28 14:40:45,746 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:40:45,756 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-28 14:40:45,787 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:40:45,794 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:40:45,835 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 791, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-28 14:40:49,186 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:40:49,188 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:40:49,189 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:40:49,190 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:40:49,208 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:40:49,209 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:40:49,210 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:40:49,210 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:40:49,211 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:40:49,211 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:40:49,211 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:40:49,219 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-28 14:40:49,246 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:40:49,249 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-28 14:40:49,272 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:40:49,275 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:40:49,292 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 791, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-28 14:40:50,175 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:40:50,177 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:40:50,178 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:40:50,179 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:40:50,183 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:40:50,183 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:40:50,184 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:40:50,184 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:40:50,184 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:40:50,185 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:40:50,185 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:40:50,192 - src.application.usecases - INFO - 投手ID 684007 の2024-08-24の試合を分析します
2025-03-28 14:40:50,196 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:40:50,202 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-24.pkl
2025-03-28 14:40:50,243 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:40:50,245 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:40:50,259 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 791, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-28 14:40:53,151 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:40:53,156 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:40:53,157 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:40:53,158 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:40:53,162 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:40:53,163 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:40:53,164 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:40:53,164 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:40:53,165 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:40:53,166 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:40:53,166 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:40:53,174 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-28 14:40:53,177 - src.infrastructure.data_repository - INFO - 投手ID 684007 の29試合分の情報を取得しました
2025-03-28 14:40:53,177 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-28 14:40:53,181 - src.application.usecases - INFO - 投手ID 684007 の2024-08-24の試合を分析します
2025-03-28 14:40:53,182 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:40:53,186 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-24.pkl
2025-03-28 14:40:53,222 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:40:53,225 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:40:53,243 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 791, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-28 14:40:55,793 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:40:55,796 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:40:55,796 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:40:55,797 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:40:55,800 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:40:55,800 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:40:55,801 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:40:55,801 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:40:55,802 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:40:55,802 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:40:55,802 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:40:55,811 - src.application.usecases - INFO - 投手ID 684007 の2024-08-24の試合を分析します
2025-03-28 14:40:55,814 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:40:55,817 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-24.pkl
2025-03-28 14:40:55,840 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:40:55,842 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:40:55,859 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 791, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-28 14:41:38,976 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:38,984 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:41:38,984 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:41:38,988 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:41:38,993 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:41:38,993 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:41:38,994 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:41:38,994 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:41:38,995 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:41:38,995 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:41:38,996 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:39,006 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 14:41:39,010 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 14:41:39,017 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:41:39,599 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:41:39,600 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:41:39,730 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:41:39,861 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:41:39,989 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:41:40,118 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:41:40,250 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:41:40,378 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:41:40,506 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:41:40,638 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:41:40,769 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:41:40,900 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:41:41,028 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:41:41,154 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:41:41,283 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:41:41,413 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:41:41,540 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:41:41,666 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:41:41,793 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:41:41,921 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:41:41,962 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:41,963 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:41:41,964 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:41:41,964 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:41:41,967 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:41:41,968 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:41:41,968 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:41:41,968 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:41:41,969 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:41:41,969 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:41:41,969 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:42,083 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:41:42,207 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:41:42,335 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:41:42,462 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:41:42,586 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:41:42,718 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:41:42,847 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:41:42,978 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:41:43,110 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:41:43,238 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:41:43,365 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:41:43,495 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 14:41:43,668 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:41:43,684 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 14:41:45,036 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:45,038 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:41:45,038 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:41:45,039 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:41:45,042 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:41:45,043 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:41:45,043 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:41:45,043 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:41:45,043 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:41:45,044 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:41:45,044 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:46,368 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:46,370 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:41:46,371 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:41:46,372 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:41:46,375 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:41:46,375 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:41:46,376 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:41:46,376 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:41:46,378 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:41:46,379 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:41:46,379 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:46,926 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:46,928 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:41:46,929 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:41:46,930 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:41:46,933 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:41:46,934 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:41:46,934 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:41:46,935 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:41:46,935 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:41:46,935 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:41:46,936 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:46,940 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 14:41:46,940 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 14:41:46,941 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:41:47,442 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:41:47,443 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:41:47,572 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:41:47,702 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:41:47,831 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:41:47,960 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:41:48,091 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:41:48,226 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:41:48,359 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:41:48,492 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:41:48,620 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:41:48,749 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:41:48,877 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:41:49,009 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:41:49,138 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:41:49,267 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:41:49,397 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:41:49,524 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:41:49,654 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:41:49,783 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:41:49,912 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:41:50,042 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:41:50,172 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:41:50,298 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:41:50,428 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:41:50,556 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:41:50,684 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:41:50,856 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:41:50,987 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:41:51,115 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:41:51,244 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:41:51,374 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 14:41:51,510 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:41:51,518 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 14:41:53,552 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:53,554 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:41:53,555 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:41:53,556 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:41:53,560 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:41:53,560 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:41:53,561 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:41:53,561 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:41:53,562 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:41:53,562 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:41:53,563 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:53,568 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-28 14:41:53,576 - src.infrastructure.data_repository - INFO - 投手ID 684007 の29試合分の情報を取得しました
2025-03-28 14:41:53,578 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-28 14:41:56,377 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:56,380 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:41:56,381 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:41:56,382 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:41:56,387 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:41:56,387 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:41:56,388 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:41:56,388 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:41:56,389 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:41:56,389 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:41:56,390 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:41:56,396 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-28 14:41:56,399 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:41:56,403 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-28 14:41:56,431 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:41:56,434 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:41:56,451 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 791, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-28 14:42:42,384 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:42:42,385 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:42:42,385 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:42:42,386 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:42:42,391 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:42:42,391 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:42:42,391 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:42:42,392 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:42:42,392 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:42:42,392 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:42:42,392 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:42:45,578 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:42:45,580 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:42:45,581 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:42:45,581 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:42:45,584 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:42:45,584 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:42:45,584 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:42:45,585 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:42:45,585 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:42:45,586 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:42:45,586 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:42:45,589 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 14:42:45,590 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 14:42:45,590 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:42:46,148 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:42:46,149 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:42:46,327 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:42:46,510 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:42:46,696 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:42:46,882 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:42:47,061 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:42:47,241 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:42:47,421 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:42:47,654 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:42:47,834 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:42:48,014 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:42:48,196 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:42:48,376 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:42:48,554 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:42:48,744 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:42:48,920 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:42:49,101 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:42:49,296 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:42:49,485 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:42:49,660 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:42:49,838 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:42:50,016 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:42:50,195 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:42:50,375 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:42:50,555 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:42:50,734 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:42:50,917 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:42:51,098 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:42:51,332 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:42:51,566 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:42:51,795 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 14:42:52,048 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:42:52,062 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 14:42:53,593 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:42:53,597 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:42:53,597 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:42:53,598 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:42:53,602 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:42:53,602 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:42:53,603 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:42:53,603 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:42:53,603 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:42:53,604 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:42:53,604 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:42:53,609 - src.application.usecases - INFO - 投手ID 660271 の2023シーズンの試合を取得します
2025-03-28 14:42:53,614 - src.infrastructure.data_repository - INFO - 投手ID 660271 の23試合分の情報を取得しました
2025-03-28 14:42:53,615 - src.application.usecases - INFO - キャッシュから23試合分のデータを取得しました
2025-03-28 14:42:55,706 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:42:55,707 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:42:55,708 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:42:55,708 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:42:55,711 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:42:55,712 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:42:55,712 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:42:55,713 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:42:55,714 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:42:55,714 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:42:55,714 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:42:55,720 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-28 14:42:55,724 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-28 14:42:55,729 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-28 14:42:55,759 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:42:55,764 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:42:55,875 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 791, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-28 14:44:40,703 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:44:40,705 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:44:40,705 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:44:40,709 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:44:40,715 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:44:40,715 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:44:40,716 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:44:40,716 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:44:40,716 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:44:40,717 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:44:40,717 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:44:43,540 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:44:43,544 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:44:43,546 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:44:43,548 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:44:43,561 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:44:43,562 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:44:43,562 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:44:43,564 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:44:43,565 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:44:43,565 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:44:43,566 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:44:43,565 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:44:43,567 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:44:43,568 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:44:43,569 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:44:43,605 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:44:43,606 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:44:43,606 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:44:43,606 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:44:43,607 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:44:43,607 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:44:43,607 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:44:43,609 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-28 14:44:43,610 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-28 14:44:43,610 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:44:44,180 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:44:44,182 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:44:44,368 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:44:44,557 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:44:44,749 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:44:44,939 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:44:45,126 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:44:45,315 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:44:45,502 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:44:45,688 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:44:45,878 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:44:46,067 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:44:46,257 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:44:46,445 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:44:46,631 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:44:46,813 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:44:47,001 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:44:47,197 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:44:47,385 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:44:47,574 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:44:47,764 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:44:47,952 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:44:48,139 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:44:48,325 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:44:48,516 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:44:48,704 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:44:48,897 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:44:49,088 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:44:49,281 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:44:49,472 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:44:49,660 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:44:49,851 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-28 14:44:49,992 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:44:50,003 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-28 14:44:59,330 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:44:59,334 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:44:59,334 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:44:59,335 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:44:59,340 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:44:59,341 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:44:59,341 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:44:59,342 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:44:59,342 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:44:59,343 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:44:59,343 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:44:59,351 - src.application.usecases - INFO - 投手ID 660271 の2023シーズンの試合を取得します
2025-03-28 14:44:59,353 - src.infrastructure.data_repository - INFO - 投手ID 660271 の23試合分の情報を取得しました
2025-03-28 14:44:59,354 - src.application.usecases - INFO - キャッシュから23試合分のデータを取得しました
2025-03-28 14:45:01,226 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:45:01,229 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:45:01,230 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:45:01,230 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:45:01,235 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:45:01,236 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:45:01,237 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:45:01,237 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:45:01,238 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:45:01,238 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:45:01,238 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:45:01,246 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-28 14:45:01,249 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-28 14:45:01,254 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-28 14:45:01,278 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:45:01,282 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:45:01,299 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 812, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-28 14:45:17,385 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:45:17,386 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:45:17,387 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:45:17,387 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:45:17,390 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:45:17,390 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:45:17,391 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:45:17,391 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:45:17,391 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:45:17,391 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:45:17,392 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:45:19,791 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:45:19,797 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:45:19,807 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:45:19,809 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:45:19,812 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:45:19,812 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:45:19,813 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:45:19,813 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:45:19,813 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:45:19,814 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:45:19,814 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:45:20,495 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:45:20,497 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:45:20,498 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:45:20,498 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:45:20,501 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:45:20,501 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:45:20,502 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:45:20,502 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:45:20,503 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:45:20,503 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:45:20,504 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:45:21,088 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:45:21,091 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:45:21,092 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:45:21,094 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:45:21,098 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:45:21,098 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:45:21,099 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:45:21,099 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:45:21,100 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:45:21,100 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:45:21,100 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:45:21,105 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 14:45:21,106 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 14:45:21,108 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:45:21,631 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:45:21,633 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:45:21,762 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:45:21,891 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:45:22,021 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:45:22,150 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:45:22,281 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:45:22,408 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:45:22,534 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:45:22,658 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:45:22,781 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:45:22,907 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:45:23,040 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:45:23,163 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:45:23,286 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:45:23,411 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:45:23,534 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:45:23,660 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:45:23,785 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:45:23,910 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:45:24,040 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:45:24,163 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:45:24,286 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:45:24,415 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:45:24,542 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:45:24,671 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:45:24,794 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:45:24,916 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:45:25,040 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:45:25,166 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:45:25,292 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:45:25,420 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 14:45:25,652 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:45:25,664 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 14:46:18,494 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:46:18,497 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:46:18,498 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:46:18,503 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:46:18,508 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:46:18,508 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:46:18,509 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:46:18,510 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:46:18,511 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:46:18,511 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:46:18,512 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:46:18,523 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-28 14:46:18,527 - src.infrastructure.data_repository - INFO - 投手ID 684007 の29試合分の情報を取得しました
2025-03-28 14:46:18,528 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-28 14:46:22,215 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:46:22,220 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:46:22,224 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:46:22,226 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:46:22,233 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:46:22,235 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:46:22,236 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:46:22,237 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:46:22,239 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:46:22,240 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:46:22,242 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:46:22,259 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-28 14:46:22,265 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:46:22,274 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-28 14:46:22,319 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:46:22,324 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:46:22,447 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 812, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-28 14:47:59,512 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:47:59,515 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:47:59,515 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:47:59,516 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:47:59,529 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:47:59,529 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:47:59,530 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:47:59,531 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:47:59,531 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:47:59,533 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:47:59,533 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:48:02,374 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:48:02,377 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:48:02,378 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:48:02,379 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:48:02,383 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:48:02,383 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:48:02,384 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:48:02,385 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:48:02,386 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:48:02,386 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:48:02,387 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:48:03,201 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:48:03,204 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:48:03,205 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:48:03,206 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:48:03,210 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:48:03,211 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:48:03,211 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:48:03,212 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:48:03,213 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:48:03,213 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:48:03,214 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:48:03,792 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:48:03,796 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:48:03,797 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:48:03,799 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:48:03,803 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:48:03,804 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:48:03,805 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:48:03,806 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:48:03,807 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:48:03,809 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:48:03,810 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:48:03,816 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 14:48:03,817 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 14:48:03,818 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:48:04,382 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:48:04,383 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:48:04,566 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:48:04,748 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:48:04,928 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:48:05,109 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:48:05,286 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:48:05,471 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:48:05,655 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:48:05,835 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:48:06,019 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:48:06,201 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:48:06,379 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:48:06,561 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:48:06,742 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:48:06,924 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:48:07,106 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:48:07,288 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:48:07,471 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:48:07,653 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:48:07,835 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:48:08,015 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:48:08,193 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:48:08,371 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:48:08,548 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:48:08,726 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:48:08,905 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:48:09,085 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:48:09,266 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:48:09,443 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:48:09,626 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:48:09,804 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 14:48:09,928 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:48:09,939 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 14:48:11,996 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:48:12,002 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:48:12,003 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:48:12,004 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:48:12,009 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:48:12,010 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:48:12,011 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:48:12,011 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:48:12,012 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:48:12,012 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:48:12,013 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:48:12,019 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-28 14:48:12,024 - src.infrastructure.data_repository - INFO - 投手ID 684007 の29試合分の情報を取得しました
2025-03-28 14:48:12,024 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-28 14:48:13,859 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:48:13,862 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:48:13,863 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:48:13,864 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:48:13,867 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:48:13,868 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:48:13,869 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:48:13,870 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:48:13,871 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:48:13,872 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:48:13,872 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:48:13,880 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-28 14:48:13,884 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:48:13,889 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-28 14:48:13,918 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:48:13,921 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:48:13,938 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 812, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-28 14:49:05,442 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:49:05,443 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:49:05,444 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:49:05,444 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:49:05,447 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:49:05,447 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:49:05,448 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:49:05,448 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:49:05,448 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:49:05,449 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:49:05,449 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:49:07,791 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:49:07,793 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:49:07,794 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:49:07,795 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:49:07,797 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:49:07,798 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:49:07,798 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:49:07,798 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:49:07,799 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:49:07,800 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:49:07,800 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:49:07,810 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-28 14:49:07,812 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-28 14:49:07,813 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-28 14:49:08,354 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-28 14:49:08,356 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-28 14:49:08,529 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-28 14:49:08,659 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-28 14:49:08,786 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-28 14:49:08,911 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-28 14:49:09,040 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-28 14:49:09,209 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-28 14:49:09,337 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-28 14:49:09,466 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-28 14:49:09,601 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-28 14:49:09,778 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-28 14:49:09,908 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-28 14:49:10,038 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-28 14:49:10,166 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-28 14:49:10,296 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-28 14:49:10,471 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-28 14:49:10,640 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-28 14:49:10,763 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-28 14:49:10,885 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-28 14:49:11,009 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-28 14:49:11,135 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-28 14:49:11,260 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-28 14:49:11,384 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-28 14:49:11,554 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-28 14:49:11,678 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-28 14:49:11,848 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-28 14:49:12,017 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-28 14:49:12,187 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-28 14:49:12,309 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-28 14:49:12,438 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-28 14:49:12,565 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-28 14:49:12,736 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-28 14:49:12,753 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-28 14:49:14,562 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:49:14,565 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:49:14,566 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:49:14,567 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:49:14,570 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:49:14,570 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:49:14,571 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:49:14,571 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:49:14,571 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:49:14,572 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:49:14,572 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:49:14,580 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-28 14:49:14,584 - src.infrastructure.data_repository - INFO - 投手ID 684007 の29試合分の情報を取得しました
2025-03-28 14:49:14,585 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-28 14:49:17,224 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:49:17,229 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-28 14:49:17,229 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-28 14:49:17,230 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-28 14:49:17,234 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-28 14:49:17,234 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-28 14:49:17,235 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-28 14:49:17,235 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-28 14:49:17,235 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-28 14:49:17,236 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-28 14:49:17,237 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-28 14:49:17,243 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-28 14:49:17,247 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-28 14:49:17,253 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-28 14:49:17,291 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-28 14:49:17,295 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-28 14:49:17,411 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 812, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-29 01:42:16,611 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:16,617 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:42:16,619 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:42:16,628 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:42:16,639 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:42:16,639 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:42:16,639 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:42:16,640 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:42:16,642 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:42:16,642 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:42:16,643 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:20,663 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:20,666 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:42:20,667 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:42:20,668 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:42:20,674 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:42:20,674 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:42:20,675 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:42:20,676 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:42:20,676 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:42:20,677 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:42:20,677 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:21,350 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:21,353 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:42:21,354 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:42:21,355 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:42:21,367 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:42:21,368 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:42:21,369 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:42:21,369 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:42:21,370 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:42:21,371 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:42:21,371 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:21,916 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:21,920 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:42:21,921 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:42:21,923 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:42:21,928 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:42:21,930 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:42:21,931 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:42:21,931 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:42:21,932 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:42:21,933 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:42:21,934 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:21,939 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 01:42:21,939 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 01:42:21,940 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 01:42:22,514 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 01:42:22,515 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 01:42:22,684 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 01:42:22,853 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 01:42:23,074 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 01:42:23,246 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 01:42:23,416 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 01:42:23,586 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 01:42:23,756 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 01:42:23,927 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 01:42:24,095 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 01:42:24,264 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 01:42:24,432 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 01:42:24,604 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 01:42:24,782 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 01:42:25,006 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 01:42:25,186 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 01:42:25,358 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 01:42:25,530 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 01:42:25,715 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 01:42:25,887 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 01:42:26,058 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 01:42:26,229 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 01:42:26,399 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 01:42:26,576 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 01:42:26,745 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 01:42:26,917 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 01:42:27,088 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 01:42:27,259 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 01:42:27,509 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 01:42:27,750 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 01:42:27,922 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 01:42:28,144 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 01:42:28,159 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 01:42:30,511 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:30,514 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:42:30,515 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:42:30,516 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:42:30,521 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:42:30,522 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:42:30,522 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:42:30,523 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:42:30,524 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:42:30,525 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:42:30,525 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:30,532 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-29 01:42:30,536 - src.infrastructure.data_repository - INFO - 投手ID 684007 の29試合分の情報を取得しました
2025-03-29 01:42:30,537 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-29 01:42:33,063 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:33,068 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:42:33,069 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:42:33,070 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:42:33,074 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:42:33,075 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:42:33,075 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:42:33,076 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:42:33,077 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:42:33,077 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:42:33,078 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:42:33,084 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-29 01:42:33,086 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 01:42:33,094 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-29 01:42:33,120 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:42:33,123 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:42:33,138 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 812, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-29 01:43:36,790 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:43:36,796 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:43:36,796 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:43:36,798 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:43:36,803 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:43:36,804 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:43:36,805 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:43:36,806 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:43:36,806 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:43:36,807 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:43:36,807 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:43:40,250 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:43:40,253 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:43:40,256 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:43:40,257 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:43:40,260 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:43:40,262 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:43:40,263 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:43:40,266 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:43:40,271 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:43:40,272 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:43:40,273 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:43:40,274 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:43:40,274 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:43:40,275 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:43:40,276 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:43:40,277 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:43:40,278 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:43:40,278 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:43:40,279 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:43:40,280 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:43:40,286 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:43:40,287 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:43:40,393 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-29 01:43:40,394 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-29 01:43:40,396 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 01:43:41,454 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 01:43:41,455 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 01:43:41,665 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 01:43:41,859 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 01:43:41,970 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 01:43:42,391 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 01:43:42,915 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 01:43:43,249 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 01:43:43,444 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 01:43:43,772 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 01:43:43,953 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 01:43:44,296 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 01:43:44,467 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 01:43:44,822 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 01:43:44,999 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 01:43:45,343 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 01:43:45,513 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 01:43:45,697 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 01:43:45,868 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 01:43:46,111 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 01:43:46,394 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 01:43:46,579 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 01:43:46,754 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 01:43:47,074 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 01:43:47,443 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 01:43:47,615 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 01:43:47,783 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 01:43:47,968 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 01:43:48,157 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 01:43:48,306 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 01:43:48,491 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 01:43:48,683 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-29 01:43:48,917 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 01:43:48,933 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:43:50,430 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:43:50,439 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:43:50,440 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:43:50,441 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:43:50,445 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:43:50,446 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:43:50,447 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:43:50,447 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:43:50,448 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:43:50,449 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:43:50,450 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:43:50,458 - src.application.usecases - INFO - 投手ID 660271 の2023シーズンの試合を取得します
2025-03-29 01:43:50,464 - src.infrastructure.data_repository - INFO - 投手ID 660271 の23試合分の情報を取得しました
2025-03-29 01:43:50,465 - src.application.usecases - INFO - キャッシュから23試合分のデータを取得しました
2025-03-29 01:43:52,244 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:43:52,248 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:43:52,249 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:43:52,250 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:43:52,254 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:43:52,255 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:43:52,255 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:43:52,256 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:43:52,256 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:43:52,257 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:43:52,257 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:43:52,265 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-29 01:43:52,267 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:43:52,274 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-29 01:43:52,300 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:43:52,304 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:43:52,319 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 812, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-29 01:45:44,737 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:45:44,740 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:45:44,740 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:45:44,741 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:45:44,745 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:45:44,745 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:45:44,745 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:45:44,746 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:45:44,746 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:45:44,748 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:45:44,749 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:45:44,759 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-29 01:45:44,762 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:45:44,773 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-29 01:45:44,803 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:45:44,806 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:45:44,834 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 808, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-29 01:45:46,804 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:45:46,807 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:45:46,808 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:45:46,809 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:45:46,814 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:45:46,815 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:45:46,816 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:45:46,816 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:45:46,817 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:45:46,817 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:45:46,818 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:45:46,825 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-29 01:45:46,827 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:45:46,830 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-29 01:45:46,858 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:45:46,862 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:45:46,883 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 808, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-29 01:45:48,013 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:45:48,018 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:45:48,020 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:45:48,021 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:45:48,024 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:45:48,026 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:45:48,026 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:45:48,027 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:45:48,028 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:45:48,029 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:45:48,030 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:45:48,035 - src.application.usecases - INFO - 投手ID 660271 の2023-07-14の試合を分析します
2025-03-29 01:45:48,038 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:45:48,046 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-07-14.pkl
2025-03-29 01:45:48,068 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:45:48,070 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:45:48,085 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 808, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-29 01:45:55,471 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:45:55,476 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:45:55,478 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:45:55,480 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:45:55,484 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:45:55,485 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:45:55,487 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:45:55,488 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:45:55,488 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:45:55,489 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:45:55,489 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:00,095 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:00,099 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:46:00,100 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:46:00,101 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:46:00,105 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:46:00,106 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:46:00,106 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:46:00,107 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:46:00,109 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:46:00,110 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:46:00,112 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:00,114 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:00,150 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:46:00,151 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:46:00,152 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:46:00,154 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:46:00,155 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:46:00,155 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:46:00,156 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:46:00,157 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:46:00,157 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:46:00,158 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:00,160 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-29 01:46:00,160 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-29 01:46:00,161 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 01:46:00,716 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 01:46:00,718 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 01:46:00,886 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 01:46:01,124 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 01:46:01,297 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 01:46:01,518 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 01:46:01,687 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 01:46:01,856 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 01:46:02,027 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 01:46:02,201 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 01:46:02,367 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 01:46:02,539 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 01:46:02,709 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 01:46:02,951 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 01:46:03,124 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 01:46:03,289 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 01:46:03,455 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 01:46:03,627 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 01:46:03,795 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 01:46:04,044 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 01:46:04,268 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 01:46:04,439 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 01:46:04,608 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 01:46:04,798 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 01:46:04,969 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 01:46:05,138 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 01:46:05,318 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 01:46:05,487 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 01:46:05,657 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 01:46:05,883 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 01:46:06,055 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 01:46:06,225 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-29 01:46:06,364 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 01:46:06,385 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:46:09,537 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:09,550 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:46:09,551 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:46:09,556 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:46:09,563 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:46:09,564 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:46:09,565 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:46:09,565 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:46:09,566 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:46:09,566 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:46:09,567 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:09,579 - src.application.usecases - INFO - 投手ID 660271 の2023シーズンの試合を取得します
2025-03-29 01:46:09,583 - src.infrastructure.data_repository - INFO - 投手ID 660271 の23試合分の情報を取得しました
2025-03-29 01:46:09,584 - src.application.usecases - INFO - キャッシュから23試合分のデータを取得しました
2025-03-29 01:46:11,283 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:11,289 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:46:11,290 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:46:11,291 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:46:11,296 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:46:11,296 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:46:11,297 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:46:11,298 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:46:11,299 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:46:11,300 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:46:11,301 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:11,307 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-29 01:46:11,312 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:46:11,320 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-29 01:46:11,344 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:46:11,348 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:46:11,375 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 808, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-29 01:46:44,520 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:44,521 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:46:44,522 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:46:44,522 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:46:44,528 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:46:44,528 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:46:44,528 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:46:44,529 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:46:44,529 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:46:44,529 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:46:44,530 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:46,998 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:47,004 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:47,004 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:46:47,006 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:46:47,007 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:46:47,008 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:46:47,009 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:46:47,010 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:46:47,014 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:46:47,014 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:46:47,015 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:46:47,015 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:46:47,016 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:46:47,016 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:46:47,017 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:46:47,017 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:46:47,018 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:46:47,018 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:46:47,018 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:46:47,019 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:47,019 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:46:47,023 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:47,088 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-29 01:46:47,088 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-29 01:46:47,089 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 01:46:47,646 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 01:46:47,647 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 01:46:47,833 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 01:46:48,011 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 01:46:48,193 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 01:46:48,377 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 01:46:48,560 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 01:46:48,748 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 01:46:49,010 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 01:46:49,194 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 01:46:49,379 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 01:46:49,563 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 01:46:49,748 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 01:46:49,932 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 01:46:50,117 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 01:46:50,304 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 01:46:50,483 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 01:46:50,664 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 01:46:50,935 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 01:46:51,121 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 01:46:51,308 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 01:46:51,489 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 01:46:51,671 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 01:46:51,858 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 01:46:52,043 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 01:46:52,226 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 01:46:52,413 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 01:46:52,671 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 01:46:52,856 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 01:46:53,041 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 01:46:53,228 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 01:46:53,414 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-29 01:46:53,598 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 01:46:53,607 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:46:54,847 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:54,851 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:46:54,852 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:46:54,853 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:46:54,857 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:46:54,858 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:46:54,858 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:46:54,859 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:46:54,859 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:46:54,860 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:46:54,861 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:54,866 - src.application.usecases - INFO - 投手ID 660271 の2023シーズンの試合を取得します
2025-03-29 01:46:54,869 - src.infrastructure.data_repository - INFO - 投手ID 660271 の23試合分の情報を取得しました
2025-03-29 01:46:54,870 - src.application.usecases - INFO - キャッシュから23試合分のデータを取得しました
2025-03-29 01:46:57,112 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:57,115 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:46:57,116 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:46:57,117 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:46:57,121 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:46:57,121 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:46:57,122 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:46:57,122 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:46:57,122 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:46:57,123 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:46:57,124 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:46:57,129 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-29 01:46:57,134 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:46:57,138 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-29 01:46:57,164 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:46:57,167 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:46:57,285 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 808, in create_performance_summary_chart
    fig.add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4031, in _process_multiple_axis_spanning_shapes
    self.add_shape(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_figure.py", line 24996, in add_shape
    return self._add_annotation_like(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 1589, in _add_annotation_like
    not self._subplot_not_empty(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4218, in _subplot_not_empty
    for t in [
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4222, in <listcomp>
    "x" if d[xaxiskw] is None else d[xaxiskw],
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4705, in __getitem__
    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5079, in _ret
    raise _error_to_raise(
_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Pie: 'xaxis'

Did you mean "ids"?

    Valid properties:
        automargin
            Determines whether outside text labels can push the
            margins.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        direction
            Specifies the direction at which succeeding sectors
            follow one another.
        dlabel
            Sets the label step. See `label0` for more info.
        domain
            :class:`plotly.graph_objects.pie.Domain` instance or
            dict with compatible properties
        hole
            Sets the fraction of the radius to cut out of the pie.
            Use this to make a donut chart.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.pie.Hoverlabel` instance
            or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`. Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each sector.
            If a single string, the same string appears for all
            data points. If an array of string, the items are
            mapped in order of this trace's sectors. To be seen,
            trace `hoverinfo` must contain a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        insidetextfont
            Sets the font used for `textinfo` lying inside the
            sector.
        insidetextorientation
            Controls the orientation of the text inside chart
            sectors. When set to "auto", text may be oriented in
            any direction in order to be as big as possible in the
            middle of a sector. The "horizontal" option orients
            text to be parallel with the bottom of the chart, and
            may make text smaller in order to achieve that goal.
            The "radial" option orients text along the radius of
            the sector. The "tangential" option orients text
            perpendicular to the radius of the sector.
        label0
            Alternate to `labels`. Builds a numeric set of labels.
            Use with `dlabel` where `label0` is the starting label
            and `dlabel` the step.
        labels
            Sets the sector labels. If `labels` entries are
            duplicated, we sum associated `values` or simply count
            occurrences if `values` is not provided. For other
            array attributes (including color) we use the first
            non-empty entry among all occurrences of the label.
        labelssrc
            Sets the source reference on Chart Studio Cloud for
            `labels`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.pie.Legendgrouptitle`
            instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        marker
            :class:`plotly.graph_objects.pie.Marker` instance or
            dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        outsidetextfont
            Sets the font used for `textinfo` lying outside the
            sector.
        pull
            Sets the fraction of larger radius to pull the sectors
            out from the center. This can be a constant to pull all
            slices apart from each other equally or an array to
            highlight one or more slices.
        pullsrc
            Sets the source reference on Chart Studio Cloud for
            `pull`.
        rotation
            Instead of the first slice starting at 12 o'clock,
            rotate to some other angle.
        scalegroup
            If there are multiple pie charts that should be sized
            according to their totals, link them by providing a
            non-empty group id here shared by every trace in the
            same group.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        sort
            Determines whether or not the sectors are reordered
            from largest to smallest.
        stream
            :class:`plotly.graph_objects.pie.Stream` instance or
            dict with compatible properties
        text
            Sets text elements associated with each sector. If
            trace `textinfo` contains a "text" flag, these elements
            will be seen on the chart. If trace `hoverinfo`
            contains a "text" flag and "hovertext" is not set,
            these elements will be seen in the hover labels.
        textfont
            Sets the font used for `textinfo`.
        textinfo
            Determines which trace information appear on the graph.
        textposition
            Specifies the location of the `textinfo`.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available. Finally, the template string has access
            to variables `label`, `color`, `value`, `percent` and
            `text`.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        title
            :class:`plotly.graph_objects.pie.Title` instance or
            dict with compatible properties
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        values
            Sets the values of the sectors. If omitted, we count
            occurrences of each label.
        valuessrc
            Sets the source reference on Chart Studio Cloud for
            `values`.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        
Did you mean "ids"?

2025-03-29 01:48:54,783 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:48:54,789 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:48:54,791 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:48:54,793 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:48:54,797 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:48:54,798 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:48:54,799 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:48:54,799 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:48:54,799 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:48:54,800 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:48:54,800 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:49:12,825 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:49:12,828 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:49:12,829 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:49:12,831 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:49:12,839 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:49:12,840 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:49:12,841 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:49:12,842 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:49:12,842 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:49:12,843 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:49:12,843 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:49:19,915 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:49:19,921 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:49:19,922 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:49:19,925 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:49:19,930 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:49:19,931 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:49:19,931 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:49:19,932 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:49:19,933 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:49:19,934 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:49:19,935 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:49:20,061 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:49:20,064 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:49:20,064 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:49:20,065 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:49:20,069 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:49:20,070 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:49:20,071 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:49:20,072 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:49:20,073 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:49:20,074 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:49:20,074 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:49:20,079 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-29 01:49:20,081 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-29 01:49:20,082 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 01:49:20,700 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 01:49:20,701 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 01:49:20,874 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 01:49:21,043 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 01:49:21,213 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 01:49:21,391 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 01:49:21,560 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 01:49:21,728 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 01:49:21,923 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 01:49:22,089 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 01:49:22,256 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 01:49:22,448 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 01:49:22,618 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 01:49:22,812 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 01:49:22,986 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 01:49:23,156 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 01:49:23,329 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 01:49:23,502 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 01:49:23,673 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 01:49:23,850 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 01:49:24,017 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 01:49:24,191 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 01:49:24,368 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 01:49:24,537 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 01:49:24,705 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 01:49:24,872 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 01:49:25,065 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 01:49:25,234 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 01:49:25,402 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 01:49:25,589 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 01:49:25,756 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 01:49:25,925 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-29 01:49:26,144 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 01:49:26,161 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:49:54,201 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:49:54,207 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:49:54,208 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:49:54,214 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:49:54,220 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:49:54,221 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:49:54,222 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:49:54,223 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:49:54,225 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:49:54,226 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:49:54,235 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:49:54,247 - src.application.usecases - INFO - 投手ID 660271 の2023シーズンの試合を取得します
2025-03-29 01:49:54,256 - src.infrastructure.data_repository - INFO - 投手ID 660271 の23試合分の情報を取得しました
2025-03-29 01:49:54,258 - src.application.usecases - INFO - キャッシュから23試合分のデータを取得しました
2025-03-29 01:49:55,978 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:49:55,981 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:49:55,982 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:49:55,983 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:49:55,988 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:49:55,989 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:49:55,990 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:49:55,990 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:49:55,990 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:49:55,991 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:49:55,992 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:49:55,999 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-29 01:49:56,002 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:49:56,009 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-29 01:49:56,032 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:49:56,035 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:49:57,186 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 01:49:57,228 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 01:49:57,270 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 01:49:57,288 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 01:49:57,309 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 01:50:45,730 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:50:45,734 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:50:45,736 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:50:45,747 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:50:45,764 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:50:45,767 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:50:45,768 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:50:45,769 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:50:45,770 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:50:45,770 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:50:45,771 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:50:45,785 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-29 01:50:45,792 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:50:45,815 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-29 01:50:45,850 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:50:45,854 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:50:45,916 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 01:50:45,940 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 01:50:45,958 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 01:50:45,978 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 01:50:46,000 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 01:50:47,452 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:50:47,457 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:50:47,458 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:50:47,460 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:50:47,465 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:50:47,466 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:50:47,467 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:50:47,468 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:50:47,468 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:50:47,469 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:50:47,470 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:50:47,474 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-29 01:50:47,481 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:50:47,487 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-29 01:50:47,504 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:50:47,508 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:50:47,555 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 01:50:47,574 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 01:50:47,593 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 01:50:47,611 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 01:50:47,630 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 01:50:48,497 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:50:48,500 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:50:48,501 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:50:48,503 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:50:48,508 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:50:48,509 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:50:48,510 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:50:48,510 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:50:48,511 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:50:48,512 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:50:48,512 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:50:48,517 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 01:50:48,518 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 01:50:48,520 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 01:50:49,060 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 01:50:49,061 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 01:50:49,230 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 01:50:49,469 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 01:50:49,644 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 01:50:49,820 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 01:50:49,997 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 01:50:50,166 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 01:50:50,337 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 01:50:50,518 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 01:50:50,690 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 01:50:50,862 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 01:50:51,048 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 01:50:51,218 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 01:50:51,393 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 01:50:51,567 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 01:50:51,737 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 01:50:51,910 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 01:50:52,096 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 01:50:52,271 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 01:50:52,445 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 01:50:52,619 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 01:50:52,789 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 01:50:52,957 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 01:50:53,146 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 01:50:53,366 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 01:50:53,537 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 01:50:53,707 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 01:50:53,877 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 01:50:54,193 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 01:50:54,429 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 01:50:54,711 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 01:50:54,931 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 01:50:54,945 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 01:50:54,954 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-29 01:50:54,960 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 01:50:54,964 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-29 01:50:54,990 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:50:54,996 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:50:55,042 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 01:50:55,062 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 01:50:55,082 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 01:50:55,102 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 01:50:55,121 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 01:50:56,065 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:50:56,069 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:50:56,070 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:50:56,072 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:50:56,076 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:50:56,076 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:50:56,077 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:50:56,077 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:50:56,078 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:50:56,079 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:50:56,080 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:50:56,087 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-29 01:50:56,090 - src.infrastructure.data_repository - INFO - 投手ID 684007 の29試合分の情報を取得しました
2025-03-29 01:50:56,090 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-29 01:50:56,093 - src.application.usecases - INFO - 投手ID 684007 の2023-08-23の試合を分析します
2025-03-29 01:50:56,096 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 01:50:56,098 - src.application.usecases - INFO - キャッシュにデータがないため、APIから取得します
2025-03-29 01:50:56,100 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 試合日 2023-08-23
2025-03-29 01:50:57,441 - src.infrastructure.baseball_savant_client - WARNING - 投手ID 684007 - データが見つかりませんでした
2025-03-29 01:50:57,442 - src.application.usecases - ERROR - 投手ID 684007 の2023-08-23の試合データが取得できませんでした
2025-03-29 01:50:59,281 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:50:59,284 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:50:59,285 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:50:59,286 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:50:59,290 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:50:59,291 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:50:59,292 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:50:59,293 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:50:59,294 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:50:59,295 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:50:59,296 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:50:59,302 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-29 01:50:59,307 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 01:50:59,313 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-29 01:50:59,338 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:50:59,341 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:50:59,386 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 01:50:59,404 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 01:50:59,424 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 01:50:59,442 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 01:50:59,462 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 01:54:14,507 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:54:14,509 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:54:14,510 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:54:14,512 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:54:14,517 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:54:14,517 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:54:14,518 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:54:14,518 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:54:14,519 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:54:14,519 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:54:14,520 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:54:14,536 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-29 01:54:14,540 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 01:54:14,550 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-29 01:54:14,604 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:54:14,611 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:54:14,743 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: 
    Invalid value of type 'builtins.str' received for the 'color' property of indicator.gauge.step
        Received value: 'rgba(255, 255, 0, a0.15)'

    The 'color' property is a color and may be specified as:
      - A hex string (e.g. '#ff0000')
      - An rgb/rgba string (e.g. 'rgb(255,0,0)')
      - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
      - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
      - A named CSS color:
            aliceblue, antiquewhite, aqua, aquamarine, azure,
            beige, bisque, black, blanchedalmond, blue,
            blueviolet, brown, burlywood, cadetblue,
            chartreuse, chocolate, coral, cornflowerblue,
            cornsilk, crimson, cyan, darkblue, darkcyan,
            darkgoldenrod, darkgray, darkgrey, darkgreen,
            darkkhaki, darkmagenta, darkolivegreen, darkorange,
            darkorchid, darkred, darksalmon, darkseagreen,
            darkslateblue, darkslategray, darkslategrey,
            darkturquoise, darkviolet, deeppink, deepskyblue,
            dimgray, dimgrey, dodgerblue, firebrick,
            floralwhite, forestgreen, fuchsia, gainsboro,
            ghostwhite, gold, goldenrod, gray, grey, green,
            greenyellow, honeydew, hotpink, indianred, indigo,
            ivory, khaki, lavender, lavenderblush, lawngreen,
            lemonchiffon, lightblue, lightcoral, lightcyan,
            lightgoldenrodyellow, lightgray, lightgrey,
            lightgreen, lightpink, lightsalmon, lightseagreen,
            lightskyblue, lightslategray, lightslategrey,
            lightsteelblue, lightyellow, lime, limegreen,
            linen, magenta, maroon, mediumaquamarine,
            mediumblue, mediumorchid, mediumpurple,
            mediumseagreen, mediumslateblue, mediumspringgreen,
            mediumturquoise, mediumvioletred, midnightblue,
            mintcream, mistyrose, moccasin, navajowhite, navy,
            oldlace, olive, olivedrab, orange, orangered,
            orchid, palegoldenrod, palegreen, paleturquoise,
            palevioletred, papayawhip, peachpuff, peru, pink,
            plum, powderblue, purple, red, rosybrown,
            royalblue, rebeccapurple, saddlebrown, salmon,
            sandybrown, seagreen, seashell, sienna, silver,
            skyblue, slateblue, slategray, slategrey, snow,
            springgreen, steelblue, tan, teal, thistle, tomato,
            turquoise, violet, wheat, white, whitesmoke,
            yellow, yellowgreen
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 159, in _render_summary
    summary_fig = self.visualizer.create_performance_summary_chart(result.performance_summary)
  File "/app/src/presentation/plotly_visualizer.py", line 999, in create_performance_summary_chart
    go.Indicator(
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/_indicator.py", line 1026, in __init__
    self["gauge"] = _v
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4852, in __setitem__
    self._set_compound_prop(prop, value)
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5263, in _set_compound_prop
    val = validator.validate_coerce(val, skip_invalid=self._skip_invalid)
  File "/usr/local/lib/python3.10/site-packages/_plotly_utils/basevalidators.py", line 2504, in validate_coerce
    v = self.data_class(v, skip_invalid=skip_invalid, _validate=_validate)
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/indicator/_gauge.py", line 680, in __init__
    self["steps"] = _v
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4856, in __setitem__
    self._set_array_prop(prop, value)
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5337, in _set_array_prop
    val = validator.validate_coerce(val, skip_invalid=self._skip_invalid)
  File "/usr/local/lib/python3.10/site-packages/_plotly_utils/basevalidators.py", line 2596, in validate_coerce
    res.append(self.data_class(v_el, skip_invalid=skip_invalid))
  File "/usr/local/lib/python3.10/site-packages/plotly/graph_objs/indicator/gauge/_step.py", line 325, in __init__
    self["color"] = _v
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 4860, in __setitem__
    self._set_prop(prop, value)
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5204, in _set_prop
    raise err
  File "/usr/local/lib/python3.10/site-packages/plotly/basedatatypes.py", line 5199, in _set_prop
    val = validator.validate_coerce(val)
  File "/usr/local/lib/python3.10/site-packages/_plotly_utils/basevalidators.py", line 1406, in validate_coerce
    self.raise_invalid_val(v)
  File "/usr/local/lib/python3.10/site-packages/_plotly_utils/basevalidators.py", line 299, in raise_invalid_val
    raise ValueError(
ValueError: 
    Invalid value of type 'builtins.str' received for the 'color' property of indicator.gauge.step
        Received value: 'rgba(255, 255, 0, a0.15)'

    The 'color' property is a color and may be specified as:
      - A hex string (e.g. '#ff0000')
      - An rgb/rgba string (e.g. 'rgb(255,0,0)')
      - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
      - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
      - A named CSS color:
            aliceblue, antiquewhite, aqua, aquamarine, azure,
            beige, bisque, black, blanchedalmond, blue,
            blueviolet, brown, burlywood, cadetblue,
            chartreuse, chocolate, coral, cornflowerblue,
            cornsilk, crimson, cyan, darkblue, darkcyan,
            darkgoldenrod, darkgray, darkgrey, darkgreen,
            darkkhaki, darkmagenta, darkolivegreen, darkorange,
            darkorchid, darkred, darksalmon, darkseagreen,
            darkslateblue, darkslategray, darkslategrey,
            darkturquoise, darkviolet, deeppink, deepskyblue,
            dimgray, dimgrey, dodgerblue, firebrick,
            floralwhite, forestgreen, fuchsia, gainsboro,
            ghostwhite, gold, goldenrod, gray, grey, green,
            greenyellow, honeydew, hotpink, indianred, indigo,
            ivory, khaki, lavender, lavenderblush, lawngreen,
            lemonchiffon, lightblue, lightcoral, lightcyan,
            lightgoldenrodyellow, lightgray, lightgrey,
            lightgreen, lightpink, lightsalmon, lightseagreen,
            lightskyblue, lightslategray, lightslategrey,
            lightsteelblue, lightyellow, lime, limegreen,
            linen, magenta, maroon, mediumaquamarine,
            mediumblue, mediumorchid, mediumpurple,
            mediumseagreen, mediumslateblue, mediumspringgreen,
            mediumturquoise, mediumvioletred, midnightblue,
            mintcream, mistyrose, moccasin, navajowhite, navy,
            oldlace, olive, olivedrab, orange, orangered,
            orchid, palegoldenrod, palegreen, paleturquoise,
            palevioletred, papayawhip, peachpuff, peru, pink,
            plum, powderblue, purple, red, rosybrown,
            royalblue, rebeccapurple, saddlebrown, salmon,
            sandybrown, seagreen, seashell, sienna, silver,
            skyblue, slateblue, slategray, slategrey, snow,
            springgreen, steelblue, tan, teal, thistle, tomato,
            turquoise, violet, wheat, white, whitesmoke,
            yellow, yellowgreen
2025-03-29 01:55:30,068 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:55:30,080 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:55:30,081 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:55:30,082 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:55:30,085 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:55:30,086 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:55:30,086 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:55:30,086 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:55:30,087 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:55:30,087 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:55:30,088 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:55:30,096 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-29 01:55:30,100 - src.infrastructure.data_repository - INFO - 投手ID 684007 の29試合分の情報を取得しました
2025-03-29 01:55:30,101 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-29 01:55:30,104 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-29 01:55:30,106 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 01:55:30,115 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-29 01:55:30,145 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:55:30,149 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:55:30,302 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 01:55:30,304 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: plotly.graph_objs._figure.Figure.update_layout() got multiple values for keyword argument 'title'
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 167, in _render_summary
    pitch_type_fig = self.visualizer.create_pitch_type_chart(result.pitch_type_analysis)
  File "/app/src/presentation/plotly_visualizer.py", line 308, in create_pitch_type_chart
    fig.update_layout(
TypeError: plotly.graph_objs._figure.Figure.update_layout() got multiple values for keyword argument 'title'
2025-03-29 01:55:38,226 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:55:38,230 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:55:38,231 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:55:38,233 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:55:38,238 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:55:38,238 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:55:38,239 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:55:38,240 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:55:38,241 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:55:38,242 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:55:38,243 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:55:38,250 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-29 01:55:38,254 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 01:55:38,258 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-29 01:55:38,291 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:55:38,295 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:55:38,362 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 01:55:38,364 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: plotly.graph_objs._figure.Figure.update_layout() got multiple values for keyword argument 'title'
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 126, in run
    self._render_summary(result)
  File "/app/src/presentation/plotly_streamlit_app.py", line 167, in _render_summary
    pitch_type_fig = self.visualizer.create_pitch_type_chart(result.pitch_type_analysis)
  File "/app/src/presentation/plotly_visualizer.py", line 308, in create_pitch_type_chart
    fig.update_layout(
TypeError: plotly.graph_objs._figure.Figure.update_layout() got multiple values for keyword argument 'title'
2025-03-29 01:56:58,053 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:56:58,057 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 01:56:58,058 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 01:56:58,063 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 01:56:58,067 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 01:56:58,068 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 01:56:58,069 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 01:56:58,069 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 01:56:58,069 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 01:56:58,070 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 01:56:58,070 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 01:56:58,084 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-29 01:56:58,086 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 01:56:58,093 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-29 01:56:58,134 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 01:56:58,137 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 01:56:58,224 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 01:56:58,244 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 01:56:58,272 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 01:56:58,290 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 01:56:58,308 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:01:33,612 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:01:33,622 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:01:33,622 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:01:33,625 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:01:33,630 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:01:33,632 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:01:33,632 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:01:33,633 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:01:33,634 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:01:33,635 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:01:33,636 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:01:33,644 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 02:01:33,645 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 02:01:33,646 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:01:34,150 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:01:34,153 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:01:34,320 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:01:34,437 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:01:34,554 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:01:34,672 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:01:34,849 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:01:34,967 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:01:35,081 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:01:35,197 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:01:35,371 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:01:35,486 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:01:35,605 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:01:35,721 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:01:35,899 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:01:36,014 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:01:36,128 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:01:36,244 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:01:36,415 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:01:36,531 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:01:36,647 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:01:36,762 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:01:36,948 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:01:37,063 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:01:37,176 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:01:37,293 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:01:37,463 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:01:37,578 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:01:37,697 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:01:37,816 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:01:37,994 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:01:38,112 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 02:01:38,273 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:01:38,286 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 02:01:38,293 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-29 02:01:38,300 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:01:38,310 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-29 02:01:38,356 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:01:38,363 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:01:39,365 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:01:39,366 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:01:39,367 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:01:39,368 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:01:39,370 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:01:39,371 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:01:39,371 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:01:39,372 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:01:39,372 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:01:39,373 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:01:39,373 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:11,168 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:11,170 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:02:11,170 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:02:11,173 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:02:11,182 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:02:11,182 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:02:11,183 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:02:11,184 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:02:11,190 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:02:11,191 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:02:11,191 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:13,935 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:13,938 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:02:13,939 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:02:13,941 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:02:13,945 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:02:13,946 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:02:13,947 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:02:13,947 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:02:13,948 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:02:13,949 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:02:13,949 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:15,152 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:15,155 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:02:15,155 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:02:15,157 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:02:15,160 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:02:15,160 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:02:15,161 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:02:15,161 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:02:15,162 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:02:15,163 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:02:15,163 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:15,869 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:15,873 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:02:15,874 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:02:15,875 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:02:15,878 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:02:15,879 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:02:15,879 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:02:15,880 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:02:15,880 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:02:15,881 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:02:15,882 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:15,886 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 02:02:15,887 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 02:02:15,887 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:02:16,371 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:02:16,372 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:02:16,531 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:02:16,647 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:02:16,789 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:02:16,908 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:02:17,024 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:02:17,189 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:02:17,310 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:02:17,429 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:02:17,597 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:02:17,840 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:02:17,956 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:02:18,073 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:02:18,186 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:02:18,360 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:02:18,523 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:02:18,681 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:02:18,790 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:02:18,994 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:02:19,155 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:02:19,275 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:02:19,435 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:02:19,554 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:02:19,717 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:02:19,831 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:02:19,991 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:02:20,154 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:02:20,318 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:02:20,455 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:02:20,572 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:02:20,690 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 02:02:20,807 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:02:20,838 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 02:02:27,925 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:27,929 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:02:27,929 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:02:27,931 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:02:27,935 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:02:27,936 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:02:27,936 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:02:27,937 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:02:27,938 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:02:27,938 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:02:27,939 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:27,944 - src.application.usecases - INFO - 投手ID 684007 の2025シーズンの試合を取得します
2025-03-29 02:02:27,945 - src.infrastructure.data_repository - INFO - 投手ID 684007 の29試合分の情報を取得しました
2025-03-29 02:02:27,946 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-29 02:02:27,946 - src.infrastructure.baseball_savant_client - INFO - 投手ID 684007の2025シーズンの試合リストを取得します
2025-03-29 02:02:27,947 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 2025シーズン全体
2025-03-29 02:02:29,911 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 69行のデータ取得
2025-03-29 02:02:29,928 - src.infrastructure.baseball_savant_client - INFO - 1個のユニークな試合日を特定しました
2025-03-29 02:02:29,931 - src.infrastructure.baseball_savant_client - INFO - 1試合のデータを取得しました
2025-03-29 02:02:29,939 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2025-03-18 (投手ID: 684007)
2025-03-29 02:02:33,613 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:33,615 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:02:33,616 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:02:33,617 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:02:33,622 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:02:33,623 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:02:33,623 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:02:33,624 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:02:33,625 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:02:33,625 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:02:33,626 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:02:33,634 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:02:33,637 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:02:33,638 - src.application.usecases - INFO - キャッシュにデータがないため、APIから取得します
2025-03-29 02:02:33,638 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 試合日 2025-03-18
2025-03-29 02:02:35,494 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 69行のデータ取得
2025-03-29 02:02:35,502 - src.infrastructure.data_repository - INFO - 投球データをキャッシュに保存しました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:02:35,529 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:02:35,533 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:02:35,605 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:02:35,624 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:02:35,652 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:02:35,681 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:02:35,710 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:07:47,709 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:07:47,738 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:07:47,739 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:07:47,747 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:07:47,751 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:07:47,752 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:07:47,752 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:07:47,753 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:07:47,753 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:07:47,754 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:07:47,755 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:07:47,774 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:07:47,776 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:07:47,787 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:07:47,821 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:07:47,825 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:07:47,924 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:07:47,945 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:07:47,971 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:07:47,991 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:07:48,015 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:07:49,107 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:07:49,110 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:07:49,111 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:07:49,111 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:07:49,115 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:07:49,116 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:07:49,117 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:07:49,117 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:07:49,118 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:07:49,118 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:07:49,119 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:07:49,123 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 02:07:49,123 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 02:07:49,124 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:07:49,697 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:07:49,699 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:07:49,870 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:07:50,041 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:07:50,222 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:07:50,405 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:07:50,592 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:07:50,769 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:07:50,944 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:07:51,118 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:07:51,292 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:07:51,465 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:07:51,636 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:07:51,811 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:07:51,988 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:07:52,162 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:07:52,337 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:07:52,511 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:07:52,683 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:07:52,859 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:07:53,031 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:07:53,202 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:07:53,397 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:07:53,568 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:07:53,740 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:07:53,910 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:07:54,083 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:07:54,256 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:07:54,429 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:07:54,599 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:07:54,768 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:07:54,939 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 02:07:55,481 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:07:55,499 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 02:07:55,514 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:07:55,534 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:07:55,566 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:07:55,621 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:07:55,626 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:07:55,791 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:07:55,815 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:07:55,848 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:07:55,869 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:07:55,913 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:08:00,001 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:08:00,016 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:08:00,017 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:08:00,020 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:08:00,031 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:08:00,031 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:08:00,032 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:08:00,033 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:08:00,033 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:08:00,034 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:08:00,034 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:08:00,049 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-29 02:08:00,052 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:08:00,053 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-29 02:08:00,056 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:08:00,058 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:08:00,066 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:08:00,100 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:08:00,103 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:08:00,200 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:08:00,222 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:08:00,251 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:08:00,269 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:08:00,289 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:08:04,440 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:08:04,444 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:08:04,444 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:08:04,445 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:08:04,450 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:08:04,450 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:08:04,451 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:08:04,452 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:08:04,453 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:08:04,454 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:08:04,455 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:08:04,461 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:08:04,465 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:08:04,468 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:08:04,485 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:08:04,488 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:08:04,575 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:08:04,593 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:08:04,618 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:08:04,636 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:08:04,657 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:08:05,623 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:08:05,628 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:08:05,629 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:08:05,631 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:08:05,635 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:08:05,635 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:08:05,636 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:08:05,637 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:08:05,638 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:08:05,638 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:08:05,639 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:08:05,644 - src.application.usecases - INFO - 投手ID 684007 の2024-09-10の試合を分析します
2025-03-29 02:08:05,647 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:08:05,648 - src.application.usecases - INFO - キャッシュにデータがないため、APIから取得します
2025-03-29 02:08:05,649 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 試合日 2024-09-10
2025-03-29 02:08:07,072 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 89行のデータ取得
2025-03-29 02:08:07,079 - src.infrastructure.data_repository - INFO - 投球データをキャッシュに保存しました: /app/data/pitch_data_684007_2024-09-10.pkl
2025-03-29 02:08:07,107 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:08:07,109 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:08:07,174 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:08:07,193 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:08:07,219 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:08:07,237 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:08:07,256 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:18:08,055 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:18:08,058 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:18:08,059 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:18:08,060 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:18:08,064 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:18:08,064 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:18:08,064 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:18:08,065 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:18:08,065 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:18:08,065 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:18:08,066 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:18:08,074 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 02:18:08,075 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 02:18:08,076 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:18:08,719 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:18:08,721 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:18:08,904 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:18:09,089 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:18:09,267 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:18:09,437 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:18:09,609 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:18:09,782 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:18:09,959 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:18:10,130 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:18:10,311 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:18:10,487 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:18:10,661 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:18:10,845 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:18:11,025 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:18:11,198 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:18:11,370 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:18:11,543 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:18:11,717 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:18:11,897 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:18:12,072 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:18:12,246 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:18:12,419 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:18:12,591 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:18:12,784 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:18:12,955 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:18:13,212 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:18:13,391 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:18:13,461 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:18:13,466 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:18:13,467 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:18:13,469 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:18:13,476 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:18:13,477 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:18:13,478 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:18:13,478 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:18:13,479 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:18:13,479 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:18:13,480 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:18:13,489 - src.application.usecases - INFO - 投手ID 684007 の2024-09-10の試合を分析します
2025-03-29 02:18:13,494 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:18:13,503 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-10.pkl
2025-03-29 02:18:13,564 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:18:13,567 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:18:13,593 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:18:13,673 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:18:13,695 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:18:13,723 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:18:13,742 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:18:13,761 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:18:13,792 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:18:14,098 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:18:14,263 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 02:18:14,438 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:18:14,454 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 02:18:15,356 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:18:15,366 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:18:15,367 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:18:15,369 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:18:15,374 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:18:15,374 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:18:15,375 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:18:15,375 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:18:15,376 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:18:15,376 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:18:15,377 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:18:15,381 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 02:18:15,382 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 02:18:15,383 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:18:15,901 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:18:15,902 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:18:16,017 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:18:16,201 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:18:16,330 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:18:16,454 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:18:16,581 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:18:16,723 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:18:16,839 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:18:16,958 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:18:17,080 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:18:17,242 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:18:17,361 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:18:17,490 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:18:17,617 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:18:17,770 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:18:17,889 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:18:18,009 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:18:18,124 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:18:18,292 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:18:18,413 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:18:18,529 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:18:18,648 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:18:18,818 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:18:18,940 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:18:19,059 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:18:19,176 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:18:19,342 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:18:19,463 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:18:19,583 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:18:19,701 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:18:19,864 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 02:18:19,983 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:18:20,001 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 02:18:20,025 - src.application.usecases - INFO - 投手ID 684007 の2024-09-10の試合を分析します
2025-03-29 02:18:20,030 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:18:20,040 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-10.pkl
2025-03-29 02:18:20,093 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:18:20,104 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:18:20,220 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:18:20,238 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:18:20,264 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:18:20,282 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:18:20,303 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:18:22,131 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:18:22,136 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:18:22,137 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:18:22,139 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:18:22,143 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:18:22,144 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:18:22,145 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:18:22,146 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:18:22,147 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:18:22,148 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:18:22,149 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:18:22,154 - src.application.usecases - INFO - 投手ID 684007 の2025シーズンの試合を取得します
2025-03-29 02:18:22,159 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:18:22,160 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-29 02:18:22,161 - src.infrastructure.baseball_savant_client - INFO - 投手ID 684007の2025シーズンの試合リストを取得します
2025-03-29 02:18:22,162 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 2025シーズン全体
2025-03-29 02:18:22,266 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 69行のデータ取得
2025-03-29 02:18:22,271 - src.infrastructure.baseball_savant_client - INFO - 1個のユニークな試合日を特定しました
2025-03-29 02:18:22,273 - src.infrastructure.baseball_savant_client - INFO - チーム情報をMLB StatsAPIから取得 (試合ID: 778563)
2025-03-29 02:18:22,274 - src.infrastructure.mlb_stats_client - INFO - 試合情報を取得 (試合ID: 778563)
2025-03-29 02:18:23,048 - src.infrastructure.mlb_stats_client - ERROR - 試合情報取得エラー (試合ID: 778563): 404 Client Error: Not Found for url: https://statsapi.mlb.com/api/v1/game/778563/feed/live
2025-03-29 02:18:23,049 - src.infrastructure.baseball_savant_client - INFO - 1試合のデータを取得しました
2025-03-29 02:18:23,062 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2025-03-18 (投手ID: 684007)
2025-03-29 02:18:23,072 - src.application.usecases - INFO - 投手ID 684007 の2024-09-10の試合を分析します
2025-03-29 02:18:23,075 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:18:23,079 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-10.pkl
2025-03-29 02:18:23,103 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:18:23,106 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:18:23,173 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:18:23,192 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:18:23,218 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:18:23,238 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:18:23,257 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:18:25,042 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:18:25,045 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:18:25,046 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:18:25,047 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:18:25,051 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:18:25,052 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:18:25,053 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:18:25,054 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:18:25,054 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:18:25,055 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:18:25,055 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:18:25,061 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:18:25,064 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:18:25,069 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:18:25,091 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:18:25,094 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:18:25,160 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:18:25,179 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:18:25,205 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:18:25,223 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:18:25,244 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:19:49,226 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:19:49,229 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:19:49,230 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:19:49,232 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:19:49,244 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:19:49,244 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:19:49,245 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:19:49,245 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:19:49,246 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:19:49,246 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:19:49,247 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:19:52,119 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:19:52,123 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:19:52,124 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:19:52,125 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:19:52,130 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:19:52,131 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:19:52,131 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:19:52,132 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:19:52,133 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:19:52,133 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:19:52,134 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:19:53,012 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:19:53,015 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:19:53,015 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:19:53,017 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:19:53,023 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:19:53,023 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:19:53,024 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:19:53,024 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:19:53,025 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:19:53,025 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:19:53,026 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:19:53,639 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:19:53,642 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:19:53,643 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:19:53,643 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:19:53,646 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:19:53,647 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:19:53,648 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:19:53,648 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:19:53,649 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:19:53,650 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:19:53,651 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:19:53,656 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 02:19:53,656 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 02:19:53,657 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:19:54,229 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:19:54,231 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:19:54,474 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:19:54,758 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:19:54,991 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:19:55,282 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:19:55,515 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:19:55,694 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:19:55,929 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:19:56,154 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:19:56,340 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:19:56,515 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:19:56,750 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:19:56,979 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:19:57,220 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:19:57,457 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:19:57,638 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:19:57,903 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:19:58,079 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:19:58,311 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:19:58,493 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:19:58,725 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:19:58,951 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:19:59,190 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:19:59,378 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:19:59,730 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:19:59,908 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:20:00,166 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:20:00,344 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:20:00,576 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:20:00,816 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:20:01,091 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 02:20:01,273 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:20:01,287 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 02:20:02,925 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:20:02,929 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:20:02,930 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:20:02,932 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:20:02,937 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:20:02,938 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:20:02,939 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:20:02,940 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:20:02,941 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:20:02,943 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:20:02,943 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:20:02,950 - src.application.usecases - INFO - 投手ID 684007 の2025シーズンの試合を取得します
2025-03-29 02:20:02,954 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:20:02,956 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-29 02:20:02,958 - src.infrastructure.baseball_savant_client - INFO - 投手ID 684007の2025シーズンの試合リストを取得します
2025-03-29 02:20:02,958 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 2025シーズン全体
2025-03-29 02:20:03,163 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 69行のデータ取得
2025-03-29 02:20:03,174 - src.infrastructure.baseball_savant_client - INFO - 1個のユニークな試合日を特定しました
2025-03-29 02:20:03,177 - src.infrastructure.baseball_savant_client - INFO - チーム情報をMLB StatsAPIから取得 (試合ID: 778563)
2025-03-29 02:20:03,178 - src.infrastructure.mlb_stats_client - INFO - 試合情報を取得 (試合ID: 778563)
2025-03-29 02:20:03,741 - src.infrastructure.mlb_stats_client - ERROR - 試合情報取得エラー (試合ID: 778563): 404 Client Error: Not Found for url: https://statsapi.mlb.com/api/v1/game/778563/feed/live
2025-03-29 02:20:03,742 - src.infrastructure.baseball_savant_client - INFO - 1試合のデータを取得しました
2025-03-29 02:20:03,756 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2025-03-18 (投手ID: 684007)
2025-03-29 02:20:05,351 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:20:05,356 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:20:05,357 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:20:05,358 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:20:05,361 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:20:05,362 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:20:05,362 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:20:05,363 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:20:05,364 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:20:05,364 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:20:05,365 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:20:05,371 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:20:05,374 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:20:05,380 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:20:05,400 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:20:05,404 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:20:05,472 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:20:05,498 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:20:05,527 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:20:05,547 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:20:05,568 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:22:58,691 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:22:58,693 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:22:58,693 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:22:58,694 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:22:58,700 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:22:58,700 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:22:58,700 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:22:58,701 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:22:58,701 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:22:58,701 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:22:58,702 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:23:02,496 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:23:02,499 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:23:02,499 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:23:02,501 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:23:02,506 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:23:02,507 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:23:02,507 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:23:02,508 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:23:02,509 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:23:02,510 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:23:02,510 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:23:03,224 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:23:03,226 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:23:03,227 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:23:03,228 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:23:03,232 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:23:03,232 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:23:03,233 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:23:03,233 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:23:03,234 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:23:03,235 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:23:03,235 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:23:03,722 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:23:03,725 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:23:03,725 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:23:03,726 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:23:03,729 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:23:03,730 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:23:03,730 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:23:03,731 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:23:03,731 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:23:03,732 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:23:03,732 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:23:03,738 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 02:23:03,739 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 02:23:03,740 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:23:04,244 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:23:04,245 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:23:04,358 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:23:04,541 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:23:04,662 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:23:04,769 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:23:04,877 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:23:05,067 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:23:05,183 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:23:05,297 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:23:05,412 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:23:05,590 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:23:05,705 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:23:05,833 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:23:05,954 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:23:06,113 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:23:06,228 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:23:06,340 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:23:06,450 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:23:06,637 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:23:06,762 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:23:06,878 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:23:06,992 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:23:07,165 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:23:07,279 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:23:07,400 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:23:07,520 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:23:07,689 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:23:07,805 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:23:07,919 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:23:08,033 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:23:08,213 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 02:23:08,430 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:23:08,445 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 02:23:10,255 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:23:10,258 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:23:10,259 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:23:10,260 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:23:10,264 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:23:10,265 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:23:10,265 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:23:10,265 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:23:10,266 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:23:10,267 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:23:10,268 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:23:10,276 - src.application.usecases - INFO - 投手ID 684007 の2025シーズンの試合を取得します
2025-03-29 02:23:10,280 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:23:10,280 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-29 02:23:10,280 - src.infrastructure.baseball_savant_client - INFO - 投手ID 684007の2025シーズンの試合リストを取得します
2025-03-29 02:23:10,281 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 2025シーズン全体
2025-03-29 02:23:10,384 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 69行のデータ取得
2025-03-29 02:23:10,391 - src.infrastructure.baseball_savant_client - INFO - 1個のユニークな試合日を特定しました
2025-03-29 02:23:10,392 - src.infrastructure.baseball_savant_client - INFO - チーム情報をMLB StatsAPIから取得 (試合ID: 778563)
2025-03-29 02:23:10,393 - src.infrastructure.mlb_stats_client - INFO - 試合情報を取得 (試合ID: 778563)
2025-03-29 02:23:10,886 - src.infrastructure.mlb_stats_client - ERROR - 試合情報取得エラー (試合ID: 778563): 404 Client Error: Not Found for url: https://statsapi.mlb.com/api/v1/game/778563/feed/live
2025-03-29 02:23:10,887 - src.infrastructure.baseball_savant_client - INFO - 1試合のデータを取得しました
2025-03-29 02:23:10,900 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2025-03-18 (投手ID: 684007)
2025-03-29 02:23:12,320 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:23:12,325 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:23:12,326 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:23:12,327 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:23:12,333 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:23:12,333 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:23:12,334 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:23:12,334 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:23:12,335 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:23:12,336 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:23:12,336 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:23:12,344 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:23:12,347 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:23:12,353 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:23:12,411 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:23:12,418 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:23:12,943 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:23:12,969 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:23:13,013 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:23:13,031 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:23:13,049 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:32:07,623 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:32:07,630 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:32:07,630 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:32:07,631 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:32:07,635 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:32:07,635 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:32:07,635 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:32:07,636 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:32:07,636 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:32:07,636 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:32:07,636 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:32:07,642 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 02:32:07,643 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 02:32:07,644 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:32:08,202 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:32:08,203 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:32:08,373 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:32:08,629 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:32:08,890 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:32:09,126 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:32:09,356 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:32:09,534 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:32:09,777 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:32:10,004 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:32:10,177 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:32:10,345 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:32:10,580 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:32:10,825 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:32:11,065 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:32:11,345 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:32:11,520 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:32:11,692 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:32:11,920 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:32:12,157 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:32:12,393 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:32:12,625 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:32:12,800 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:32:13,025 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:32:13,202 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:32:13,442 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:32:13,630 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:32:13,804 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:32:13,973 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:32:14,193 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:32:14,489 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:32:14,711 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 02:32:14,878 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:32:14,887 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 02:32:14,892 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:32:14,896 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:32:14,902 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:32:14,930 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:32:14,930 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: 'AnalysisResult' object has no attribute 'ensure_pitch_types_translated'
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 120, in run
    result.ensure_pitch_types_translated()
AttributeError: 'AnalysisResult' object has no attribute 'ensure_pitch_types_translated'
2025-03-29 02:32:18,291 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:32:18,294 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:32:18,294 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:32:18,295 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:32:18,299 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:32:18,299 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:32:18,300 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:32:18,300 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:32:18,301 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:32:18,301 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:32:18,302 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:32:18,307 - src.application.usecases - INFO - 投手ID 684007 の2025シーズンの試合を取得します
2025-03-29 02:32:18,310 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:32:18,311 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-29 02:32:18,311 - src.infrastructure.baseball_savant_client - INFO - 投手ID 684007の2025シーズンの試合リストを取得します
2025-03-29 02:32:18,312 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 2025シーズン全体
2025-03-29 02:32:18,404 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 69行のデータ取得
2025-03-29 02:32:18,408 - src.infrastructure.baseball_savant_client - INFO - 1個のユニークな試合日を特定しました
2025-03-29 02:32:18,410 - src.infrastructure.baseball_savant_client - INFO - チーム情報をMLB StatsAPIから取得 (試合ID: 778563)
2025-03-29 02:32:18,410 - src.infrastructure.mlb_stats_client - INFO - 試合情報を取得 (試合ID: 778563)
2025-03-29 02:32:18,925 - src.infrastructure.mlb_stats_client - ERROR - 試合情報取得エラー (試合ID: 778563): 404 Client Error: Not Found for url: https://statsapi.mlb.com/api/v1/game/778563/feed/live
2025-03-29 02:32:18,927 - src.infrastructure.baseball_savant_client - INFO - 1試合のデータを取得しました
2025-03-29 02:32:18,940 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2025-03-18 (投手ID: 684007)
2025-03-29 02:32:18,950 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:32:18,954 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:32:18,958 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:32:18,979 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:32:18,980 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: 'AnalysisResult' object has no attribute 'ensure_pitch_types_translated'
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 120, in run
    result.ensure_pitch_types_translated()
AttributeError: 'AnalysisResult' object has no attribute 'ensure_pitch_types_translated'
2025-03-29 02:32:20,663 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:32:20,665 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:32:20,665 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:32:20,666 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:32:20,669 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:32:20,670 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:32:20,670 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:32:20,671 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:32:20,671 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:32:20,671 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:32:20,672 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:32:20,679 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:32:20,681 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:32:20,686 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:32:20,705 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:32:20,706 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: 'AnalysisResult' object has no attribute 'ensure_pitch_types_translated'
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 120, in run
    result.ensure_pitch_types_translated()
AttributeError: 'AnalysisResult' object has no attribute 'ensure_pitch_types_translated'
2025-03-29 02:32:23,416 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:32:23,420 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:32:23,421 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:32:23,422 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:32:23,425 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:32:23,426 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:32:23,426 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:32:23,426 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:32:23,427 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:32:23,427 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:32:23,427 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:32:23,435 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:32:23,438 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:32:23,443 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:32:23,466 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:32:23,466 - src.presentation.plotly_streamlit_app - ERROR - 分析エラー: 'AnalysisResult' object has no attribute 'ensure_pitch_types_translated'
Traceback (most recent call last):
  File "/app/src/presentation/plotly_streamlit_app.py", line 120, in run
    result.ensure_pitch_types_translated()
AttributeError: 'AnalysisResult' object has no attribute 'ensure_pitch_types_translated'
2025-03-29 02:33:12,323 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:12,325 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:33:12,325 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:33:12,326 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:33:12,330 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:33:12,331 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:33:12,331 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:33:12,332 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:33:12,334 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:33:12,335 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:33:12,335 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:14,661 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:14,663 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:33:14,663 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:33:14,664 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:33:14,669 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:33:14,669 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:33:14,670 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:33:14,671 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:33:14,671 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:33:14,672 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:33:14,672 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:15,472 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:15,473 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:33:15,474 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:33:15,475 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:33:15,479 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:33:15,479 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:33:15,480 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:33:15,480 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:33:15,481 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:33:15,482 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:33:15,482 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:16,030 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:16,033 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:33:16,034 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:33:16,034 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:33:16,038 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:33:16,039 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:33:16,039 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:33:16,040 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:33:16,040 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:33:16,040 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:33:16,041 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:16,045 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 02:33:16,046 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 02:33:16,047 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:33:16,609 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:33:16,609 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:33:16,884 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:33:17,128 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:33:17,316 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:33:17,639 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:33:17,931 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:33:18,123 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:33:18,364 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:33:18,739 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:33:18,982 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:33:19,168 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:33:19,406 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:33:19,734 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:33:20,029 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:33:20,270 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:33:20,458 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:33:20,727 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:33:20,967 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:33:21,206 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:33:21,393 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:33:21,693 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:33:21,882 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:33:22,130 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:33:22,318 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:33:22,554 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:33:22,823 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:33:23,009 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:33:23,197 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:33:23,494 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:33:23,758 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:33:24,003 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 02:33:24,224 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:33:24,237 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 02:33:27,308 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:27,312 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:33:27,312 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:33:27,313 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:33:27,319 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:33:27,319 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:33:27,320 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:33:27,320 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:33:27,320 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:33:27,321 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:33:27,321 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:27,329 - src.application.usecases - INFO - 投手ID 684007 の2025シーズンの試合を取得します
2025-03-29 02:33:27,333 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:33:27,334 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-29 02:33:27,334 - src.infrastructure.baseball_savant_client - INFO - 投手ID 684007の2025シーズンの試合リストを取得します
2025-03-29 02:33:27,334 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 2025シーズン全体
2025-03-29 02:33:27,440 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 69行のデータ取得
2025-03-29 02:33:27,446 - src.infrastructure.baseball_savant_client - INFO - 1個のユニークな試合日を特定しました
2025-03-29 02:33:27,448 - src.infrastructure.baseball_savant_client - INFO - チーム情報をMLB StatsAPIから取得 (試合ID: 778563)
2025-03-29 02:33:27,449 - src.infrastructure.mlb_stats_client - INFO - 試合情報を取得 (試合ID: 778563)
2025-03-29 02:33:28,004 - src.infrastructure.mlb_stats_client - ERROR - 試合情報取得エラー (試合ID: 778563): 404 Client Error: Not Found for url: https://statsapi.mlb.com/api/v1/game/778563/feed/live
2025-03-29 02:33:28,005 - src.infrastructure.baseball_savant_client - INFO - 1試合のデータを取得しました
2025-03-29 02:33:28,019 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2025-03-18 (投手ID: 684007)
2025-03-29 02:33:29,851 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:29,854 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:33:29,855 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:33:29,856 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:33:29,861 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:33:29,862 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:33:29,862 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:33:29,862 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:33:29,863 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:33:29,863 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:33:29,863 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:33:29,869 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:33:29,872 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:33:29,879 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:33:29,898 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:33:29,901 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:33:29,972 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:33:29,990 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:33:30,016 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:33:30,036 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:33:30,071 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:36:10,890 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:36:10,897 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:36:10,898 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:36:10,902 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:36:10,910 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:36:10,911 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:36:10,912 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:36:10,912 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:36:10,912 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:36:10,913 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:36:10,913 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:36:10,926 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:36:10,933 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:36:10,947 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:36:10,984 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:36:10,990 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:36:11,124 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:36:11,160 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:36:11,234 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:36:11,292 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:36:11,335 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:38:14,848 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:38:14,852 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:38:14,852 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:38:14,854 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:38:14,858 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:38:14,859 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:38:14,859 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:38:14,859 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:38:14,860 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:38:14,860 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:38:14,860 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:38:14,877 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:38:14,881 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:38:14,890 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:38:14,933 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:38:14,937 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:38:15,073 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:38:15,095 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:38:15,124 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:38:15,146 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:38:15,167 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:38:15,406 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:38:15,408 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:38:15,408 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:38:15,408 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:38:15,410 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:38:15,410 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:38:15,411 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:38:15,411 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:38:15,411 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:38:15,411 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:38:15,412 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:38:15,414 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 02:38:15,414 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 02:38:15,414 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:38:15,959 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:38:15,961 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:38:16,135 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:38:16,362 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:38:16,539 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:38:16,768 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:38:17,001 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:38:17,174 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:38:17,404 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:38:17,642 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:38:17,817 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:38:17,986 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:38:18,159 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:38:18,336 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:38:18,511 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:38:18,683 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:38:18,863 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:38:19,033 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:38:19,209 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:38:19,388 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:38:19,556 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:38:19,728 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:38:19,913 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:38:20,083 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:38:20,259 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:38:20,433 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:38:20,609 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:38:20,786 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:38:20,960 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:38:21,135 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:38:21,247 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:38:21,251 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:38:21,252 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:38:21,253 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:38:21,257 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:38:21,258 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:38:21,258 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:38:21,259 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:38:21,259 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:38:21,260 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:38:21,260 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:38:21,266 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-29 02:38:21,269 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:38:21,269 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-29 02:38:21,272 - src.application.usecases - INFO - 投手ID 684007 の2025-03-18の試合を分析します
2025-03-29 02:38:21,273 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:38:21,276 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2025-03-18.pkl
2025-03-29 02:38:21,297 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:38:21,300 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:38:21,326 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:38:21,369 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:38:21,387 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:38:21,413 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:38:21,432 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:38:21,452 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:38:21,539 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 02:38:21,754 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:38:21,768 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 02:38:23,317 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:38:23,323 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:38:23,324 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:38:23,325 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:38:23,328 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:38:23,329 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:38:23,329 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:38:23,329 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:38:23,330 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:38:23,330 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:38:23,330 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:38:23,337 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-29 02:38:23,340 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:38:23,346 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-29 02:38:23,369 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:38:23,373 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:38:23,440 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:38:23,458 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:38:23,484 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:38:23,504 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:38:23,528 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:39:23,978 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:23,982 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:39:23,982 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:39:23,985 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:39:23,990 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:39:23,991 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:39:23,991 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:39:23,992 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:39:23,992 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:39:23,993 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:39:23,993 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:24,005 - src.application.usecases - INFO - 投手ID 684007 の2024-09-22の試合を分析します
2025-03-29 02:39:24,007 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:24,015 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-09-22.pkl
2025-03-29 02:39:24,052 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:39:24,057 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:39:24,149 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:39:24,168 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:39:24,198 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:39:24,218 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:39:24,238 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:39:24,750 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:24,753 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:39:24,753 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:39:24,754 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:39:24,757 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:39:24,758 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:39:24,759 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:39:24,759 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:39:24,760 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:39:24,760 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:39:24,761 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:24,767 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:39:24,771 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:24,777 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:39:24,802 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:39:24,806 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:39:24,872 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:39:24,890 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:39:24,916 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:39:24,933 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:39:24,957 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:39:28,686 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:28,688 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:39:28,689 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:39:28,690 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:39:28,693 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:39:28,694 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:39:28,694 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:39:28,695 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:39:28,696 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:39:28,696 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:39:28,697 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:28,705 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:39:28,729 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:28,732 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:39:28,756 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:39:28,760 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:39:28,826 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:39:28,844 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:39:28,869 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:39:28,887 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:39:28,907 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:39:31,382 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:31,386 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:39:31,386 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:39:31,387 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:39:31,390 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:39:31,390 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:39:31,391 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:39:31,391 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:39:31,392 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:39:31,392 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:39:31,392 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:31,398 - src.application.usecases - INFO - 投手ID 684007 の2025シーズンの試合を取得します
2025-03-29 02:39:31,401 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:39:31,402 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-29 02:39:31,403 - src.infrastructure.baseball_savant_client - INFO - 投手ID 684007の2025シーズンの試合リストを取得します
2025-03-29 02:39:31,403 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 2025シーズン全体
2025-03-29 02:39:31,516 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 69行のデータ取得
2025-03-29 02:39:31,520 - src.infrastructure.baseball_savant_client - INFO - 1個のユニークな試合日を特定しました
2025-03-29 02:39:31,522 - src.infrastructure.baseball_savant_client - INFO - チーム情報をMLB StatsAPIから取得 (試合ID: 778563)
2025-03-29 02:39:31,523 - src.infrastructure.mlb_stats_client - INFO - 試合情報を取得 (試合ID: 778563)
2025-03-29 02:39:32,086 - src.infrastructure.mlb_stats_client - ERROR - 試合情報取得エラー (試合ID: 778563): 404 Client Error: Not Found for url: https://statsapi.mlb.com/api/v1/game/778563/feed/live
2025-03-29 02:39:32,087 - src.infrastructure.baseball_savant_client - INFO - 1試合のデータを取得しました
2025-03-29 02:39:32,099 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2025-03-18 (投手ID: 684007)
2025-03-29 02:39:32,111 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:39:32,117 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:32,122 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:39:32,145 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:39:32,149 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:39:32,220 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:39:32,238 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:39:32,263 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:39:32,281 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:39:32,300 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:39:34,902 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:34,904 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:39:34,905 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:39:34,905 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:39:34,910 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:39:34,911 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:39:34,911 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:39:34,912 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:39:34,912 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:39:34,912 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:39:34,913 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:34,919 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:39:34,922 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:34,925 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:39:34,944 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:39:34,947 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:39:35,021 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:39:35,042 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:39:35,077 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:39:35,098 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:39:35,118 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:39:35,933 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:35,936 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:39:35,937 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:39:35,937 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:39:35,941 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:39:35,942 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:39:35,942 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:39:35,943 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:39:35,943 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:39:35,943 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:39:35,944 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:35,948 - src.application.usecases - INFO - 投手名 'Imanaga' で検索します
2025-03-29 02:39:35,949 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Imanaga' で検索しています
2025-03-29 02:39:35,949 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:39:36,463 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:39:36,465 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:39:36,637 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:39:36,751 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:39:36,976 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:39:37,092 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:39:37,212 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:39:37,383 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:39:37,505 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:39:37,624 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:39:37,798 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:39:37,921 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:39:38,042 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:39:38,160 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:39:38,277 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:39:38,399 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:39:38,554 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:39:38,673 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:39:38,797 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:39:38,916 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:39:39,078 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:39:39,197 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:39:39,317 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:39:39,455 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:39:39,601 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:39:39,720 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:39:39,843 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:39:40,016 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:39:40,136 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:39:40,254 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:39:40,373 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:39:40,493 - src.infrastructure.mlb_stats_client - INFO - 'Imanaga'の検索結果: 1件
2025-03-29 02:39:40,647 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:39:40,656 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:40,660 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:39:40,663 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:40,665 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:39:40,684 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:39:40,687 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:39:40,753 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:39:40,772 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:39:40,798 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:39:40,816 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:39:40,834 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:39:43,017 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:43,021 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:39:43,022 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:39:43,023 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:39:43,027 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:39:43,028 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:39:43,028 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:39:43,029 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:39:43,029 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:39:43,029 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:39:43,029 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:43,036 - src.application.usecases - INFO - 投手ID 684007 の2021シーズンの試合を取得します
2025-03-29 02:39:43,040 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:39:43,040 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-29 02:39:43,041 - src.infrastructure.baseball_savant_client - INFO - 投手ID 684007の2021シーズンの試合リストを取得します
2025-03-29 02:39:43,041 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 2021シーズン全体
2025-03-29 02:39:44,430 - src.infrastructure.baseball_savant_client - WARNING - 投手ID 684007 - データが見つかりませんでした
2025-03-29 02:39:44,431 - src.infrastructure.baseball_savant_client - WARNING - 投手ID 684007の2021シーズンデータが取得できませんでした
2025-03-29 02:39:44,436 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:39:44,439 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:44,444 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:39:44,474 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:39:44,479 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:39:44,560 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:39:44,580 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:39:44,608 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:39:44,625 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:39:44,644 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:39:47,515 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:47,519 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:39:47,520 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:39:47,521 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:39:47,525 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:39:47,526 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:39:47,526 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:39:47,527 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:39:47,527 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:39:47,528 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:39:47,528 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:47,537 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:39:47,566 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:47,573 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:39:47,595 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:39:47,598 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:39:47,671 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:39:47,688 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:39:47,713 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:39:47,733 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:39:47,753 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:39:48,599 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:48,601 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:39:48,602 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:39:48,603 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:39:48,607 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:39:48,607 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:39:48,607 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:39:48,608 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:39:48,608 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:39:48,609 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:39:48,609 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:48,615 - src.application.usecases - INFO - 投手ID 684007 の2023シーズンの試合を取得します
2025-03-29 02:39:48,619 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:39:48,619 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-29 02:39:48,620 - src.infrastructure.baseball_savant_client - INFO - 投手ID 684007の2023シーズンの試合リストを取得します
2025-03-29 02:39:48,620 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 2023シーズン全体
2025-03-29 02:39:50,109 - src.infrastructure.baseball_savant_client - WARNING - 投手ID 684007 - データが見つかりませんでした
2025-03-29 02:39:50,110 - src.infrastructure.baseball_savant_client - WARNING - 投手ID 684007の2023シーズンデータが取得できませんでした
2025-03-29 02:39:50,114 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:39:50,117 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:50,121 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:39:50,147 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:39:50,151 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:39:50,225 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:39:50,243 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:39:50,268 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:39:50,285 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:39:50,303 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:39:53,921 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:53,924 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:39:53,925 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:39:53,926 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:39:53,929 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:39:53,929 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:39:53,930 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:39:53,931 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:39:53,931 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:39:53,932 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:39:53,932 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:53,939 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:39:53,943 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:53,947 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:39:53,984 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:39:53,989 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:39:54,057 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:39:54,074 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:39:54,099 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:39:54,119 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:39:54,143 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:39:54,971 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:54,974 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:39:54,975 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:39:54,976 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:39:54,979 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:39:54,979 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:39:54,980 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:39:54,980 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:39:54,981 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:39:54,981 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:39:54,982 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:39:54,987 - src.application.usecases - INFO - 投手ID 684007 の2024シーズンの試合を取得します
2025-03-29 02:39:54,992 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:39:54,992 - src.application.usecases - INFO - キャッシュから29試合分のデータを取得しました
2025-03-29 02:39:54,996 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:39:54,997 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:39:54,999 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:39:55,026 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:39:55,030 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:39:55,117 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:39:55,134 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:39:55,158 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:39:55,177 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:39:55,195 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:40:02,254 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:02,258 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:40:02,258 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:40:02,259 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:40:02,263 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:40:02,264 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:40:02,265 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:40:02,265 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:40:02,265 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:40:02,266 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:40:02,266 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:02,273 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:40:02,278 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:40:02,302 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:40:02,322 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:40:02,325 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:40:02,392 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:40:02,410 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:40:02,435 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:40:02,452 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:40:02,472 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:40:04,398 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:04,402 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:40:04,403 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:40:04,405 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:40:04,411 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:40:04,412 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:40:04,413 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:40:04,413 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:40:04,413 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:40:04,414 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:40:04,414 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:04,424 - src.application.usecases - INFO - 投手ID 684007 の2025シーズンの試合を取得します
2025-03-29 02:40:04,430 - src.infrastructure.data_repository - INFO - 投手ID 684007 の30試合分の情報を取得しました
2025-03-29 02:40:04,430 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-29 02:40:04,431 - src.infrastructure.baseball_savant_client - INFO - 投手ID 684007の2025シーズンの試合リストを取得します
2025-03-29 02:40:04,431 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 684007, 2025シーズン全体
2025-03-29 02:40:04,515 - src.infrastructure.baseball_savant_client - INFO - 取得成功: 69行のデータ取得
2025-03-29 02:40:04,522 - src.infrastructure.baseball_savant_client - INFO - 1個のユニークな試合日を特定しました
2025-03-29 02:40:04,524 - src.infrastructure.baseball_savant_client - INFO - チーム情報をMLB StatsAPIから取得 (試合ID: 778563)
2025-03-29 02:40:04,524 - src.infrastructure.mlb_stats_client - INFO - 試合情報を取得 (試合ID: 778563)
2025-03-29 02:40:04,994 - src.infrastructure.mlb_stats_client - ERROR - 試合情報取得エラー (試合ID: 778563): 404 Client Error: Not Found for url: https://statsapi.mlb.com/api/v1/game/778563/feed/live
2025-03-29 02:40:04,994 - src.infrastructure.baseball_savant_client - INFO - 1試合のデータを取得しました
2025-03-29 02:40:05,004 - src.infrastructure.data_repository - INFO - 試合情報を保存しました: 2025-03-18 (投手ID: 684007)
2025-03-29 02:40:05,010 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:40:05,013 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:40:05,017 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:40:05,053 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:40:05,058 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:40:05,156 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:40:05,174 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:40:05,205 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:40:05,228 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:40:05,253 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:40:09,968 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:09,972 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:40:09,973 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:40:09,975 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:40:09,978 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:09,980 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:40:09,981 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:40:09,981 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:40:09,982 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:40:09,982 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:40:09,983 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:40:09,984 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:40:09,984 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:40:09,985 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:40:09,985 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:09,986 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:40:10,035 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:40:10,036 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:40:10,036 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:40:10,037 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:40:10,037 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:40:10,038 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:10,040 - src.application.usecases - INFO - 投手名 'Shohei Ohtani' で検索します
2025-03-29 02:40:10,040 - src.infrastructure.baseball_savant_client - INFO - 投手名 'Shohei Ohtani' で検索しています
2025-03-29 02:40:10,041 - src.infrastructure.mlb_stats_client - INFO - MLBチームリストをAPI経由で取得
2025-03-29 02:40:10,535 - src.infrastructure.mlb_stats_client - INFO - 30チームのデータを検索します
2025-03-29 02:40:10,537 - src.infrastructure.mlb_stats_client - INFO - チームID 133 のロスターをAPI経由で取得
2025-03-29 02:40:10,717 - src.infrastructure.mlb_stats_client - INFO - チームID 134 のロスターをAPI経由で取得
2025-03-29 02:40:10,836 - src.infrastructure.mlb_stats_client - INFO - チームID 135 のロスターをAPI経由で取得
2025-03-29 02:40:10,955 - src.infrastructure.mlb_stats_client - INFO - チームID 136 のロスターをAPI経由で取得
2025-03-29 02:40:11,070 - src.infrastructure.mlb_stats_client - INFO - チームID 137 のロスターをAPI経由で取得
2025-03-29 02:40:11,192 - src.infrastructure.mlb_stats_client - INFO - チームID 138 のロスターをAPI経由で取得
2025-03-29 02:40:11,313 - src.infrastructure.mlb_stats_client - INFO - チームID 139 のロスターをAPI経由で取得
2025-03-29 02:40:11,489 - src.infrastructure.mlb_stats_client - INFO - チームID 140 のロスターをAPI経由で取得
2025-03-29 02:40:11,690 - src.infrastructure.mlb_stats_client - INFO - チームID 141 のロスターをAPI経由で取得
2025-03-29 02:40:11,810 - src.infrastructure.mlb_stats_client - INFO - チームID 142 のロスターをAPI経由で取得
2025-03-29 02:40:11,928 - src.infrastructure.mlb_stats_client - INFO - チームID 143 のロスターをAPI経由で取得
2025-03-29 02:40:12,106 - src.infrastructure.mlb_stats_client - INFO - チームID 144 のロスターをAPI経由で取得
2025-03-29 02:40:12,229 - src.infrastructure.mlb_stats_client - INFO - チームID 145 のロスターをAPI経由で取得
2025-03-29 02:40:12,348 - src.infrastructure.mlb_stats_client - INFO - チームID 146 のロスターをAPI経由で取得
2025-03-29 02:40:12,470 - src.infrastructure.mlb_stats_client - INFO - チームID 147 のロスターをAPI経由で取得
2025-03-29 02:40:12,633 - src.infrastructure.mlb_stats_client - INFO - チームID 158 のロスターをAPI経由で取得
2025-03-29 02:40:12,755 - src.infrastructure.mlb_stats_client - INFO - チームID 108 のロスターをAPI経由で取得
2025-03-29 02:40:12,875 - src.infrastructure.mlb_stats_client - INFO - チームID 109 のロスターをAPI経由で取得
2025-03-29 02:40:12,995 - src.infrastructure.mlb_stats_client - INFO - チームID 110 のロスターをAPI経由で取得
2025-03-29 02:40:13,157 - src.infrastructure.mlb_stats_client - INFO - チームID 111 のロスターをAPI経由で取得
2025-03-29 02:40:13,276 - src.infrastructure.mlb_stats_client - INFO - チームID 112 のロスターをAPI経由で取得
2025-03-29 02:40:13,395 - src.infrastructure.mlb_stats_client - INFO - チームID 113 のロスターをAPI経由で取得
2025-03-29 02:40:13,519 - src.infrastructure.mlb_stats_client - INFO - チームID 114 のロスターをAPI経由で取得
2025-03-29 02:40:13,683 - src.infrastructure.mlb_stats_client - INFO - チームID 115 のロスターをAPI経由で取得
2025-03-29 02:40:13,801 - src.infrastructure.mlb_stats_client - INFO - チームID 116 のロスターをAPI経由で取得
2025-03-29 02:40:13,920 - src.infrastructure.mlb_stats_client - INFO - チームID 117 のロスターをAPI経由で取得
2025-03-29 02:40:14,037 - src.infrastructure.mlb_stats_client - INFO - チームID 118 のロスターをAPI経由で取得
2025-03-29 02:40:14,203 - src.infrastructure.mlb_stats_client - INFO - チームID 119 のロスターをAPI経由で取得
2025-03-29 02:40:14,323 - src.infrastructure.mlb_stats_client - INFO - チームID 120 のロスターをAPI経由で取得
2025-03-29 02:40:14,442 - src.infrastructure.mlb_stats_client - INFO - チームID 121 のロスターをAPI経由で取得
2025-03-29 02:40:14,561 - src.infrastructure.mlb_stats_client - INFO - 'Shohei Ohtani'の検索結果: 1件
2025-03-29 02:40:14,787 - src.infrastructure.baseball_savant_client - INFO - 1人の投手が見つかりました
2025-03-29 02:40:14,804 - src.infrastructure.data_repository - INFO - 投手情報を保存しました: Shohei Ohtani (ID: 660271)
2025-03-29 02:40:14,818 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:40:14,822 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:40:14,829 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:40:14,861 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:40:14,866 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:40:14,955 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:40:14,974 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:40:15,003 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:40:15,030 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:40:15,058 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:40:16,965 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:16,969 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:40:16,969 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:40:16,970 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:40:16,973 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:40:16,974 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:40:16,974 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:40:16,974 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:40:16,975 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:40:16,975 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:40:16,976 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:16,981 - src.application.usecases - INFO - 投手ID 660271 の2025シーズンの試合を取得します
2025-03-29 02:40:16,985 - src.infrastructure.data_repository - INFO - 投手ID 660271 の23試合分の情報を取得しました
2025-03-29 02:40:16,985 - src.application.usecases - INFO - キャッシュ不十分: APIから試合データを取得します
2025-03-29 02:40:16,986 - src.infrastructure.baseball_savant_client - INFO - 投手ID 660271の2025シーズンの試合リストを取得します
2025-03-29 02:40:16,986 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 660271, 2025シーズン全体
2025-03-29 02:40:18,577 - src.infrastructure.baseball_savant_client - WARNING - 投手ID 660271 - データが見つかりませんでした
2025-03-29 02:40:18,578 - src.infrastructure.baseball_savant_client - WARNING - 投手ID 660271の2025シーズンデータが取得できませんでした
2025-03-29 02:40:18,582 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:40:18,586 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:40:18,589 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:40:18,610 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:40:18,613 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:40:18,681 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:40:18,700 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:40:18,725 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:40:18,744 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:40:18,764 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:40:22,210 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:22,213 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:40:22,214 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:40:22,215 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:40:22,218 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:40:22,219 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:40:22,219 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:40:22,219 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:40:22,220 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:40:22,220 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:40:22,220 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:22,226 - src.application.usecases - INFO - 投手ID 684007 の2024-08-30の試合を分析します
2025-03-29 02:40:22,230 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shota Imanaga (ID: 684007)
2025-03-29 02:40:22,232 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_684007_2024-08-30.pkl
2025-03-29 02:40:22,255 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:40:22,259 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:40:22,327 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:40:22,344 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:40:22,370 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:40:22,388 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:40:22,407 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:40:23,316 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:23,319 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:40:23,320 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:40:23,321 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:40:23,324 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:40:23,325 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:40:23,325 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:40:23,326 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:40:23,326 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:40:23,327 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:40:23,327 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:23,333 - src.application.usecases - INFO - 投手ID 660271 の2023シーズンの試合を取得します
2025-03-29 02:40:23,337 - src.infrastructure.data_repository - INFO - 投手ID 660271 の23試合分の情報を取得しました
2025-03-29 02:40:23,337 - src.application.usecases - INFO - キャッシュから23試合分のデータを取得しました
2025-03-29 02:40:23,341 - src.application.usecases - INFO - 投手ID 660271 の2024-08-30の試合を分析します
2025-03-29 02:40:23,344 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 02:40:23,345 - src.application.usecases - INFO - キャッシュにデータがないため、APIから取得します
2025-03-29 02:40:23,345 - src.infrastructure.baseball_savant_client - INFO - Baseball Savantからデータ取得: 投手ID 660271, 試合日 2024-08-30
2025-03-29 02:40:24,608 - src.infrastructure.baseball_savant_client - WARNING - 投手ID 660271 - データが見つかりませんでした
2025-03-29 02:40:24,611 - src.application.usecases - ERROR - 投手ID 660271 の2024-08-30の試合データが取得できませんでした
2025-03-29 02:40:26,256 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:26,258 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:40:26,259 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:40:26,260 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:40:26,263 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:40:26,263 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:40:26,264 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:40:26,265 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:40:26,265 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:40:26,266 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:40:26,266 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:26,274 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-29 02:40:26,278 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 02:40:26,282 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-29 02:40:26,304 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:40:26,308 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:40:26,374 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:40:26,396 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:40:26,421 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:40:26,440 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:40:26,459 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:40:28,838 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:28,840 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:40:28,841 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:40:28,842 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:40:28,846 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:40:28,846 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:40:28,847 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:40:28,848 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:40:28,848 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:40:28,849 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:40:28,849 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:28,855 - src.application.usecases - INFO - 投手ID 660271 の2023-08-23の試合を分析します
2025-03-29 02:40:28,859 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 02:40:28,863 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-08-23.pkl
2025-03-29 02:40:28,886 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:40:28,893 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:40:28,969 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:40:28,987 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:40:29,012 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:40:29,030 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:40:29,051 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
2025-03-29 02:40:29,500 - __main__ - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:29,502 - src.service_factory - INFO - サービスファクトリを初期化しています
2025-03-29 02:40:29,502 - src.service_factory - INFO - Streamlitアプリケーションを作成しています
2025-03-29 02:40:29,503 - src.service_factory - INFO - BaseballSavantClientを作成しました
2025-03-29 02:40:29,506 - src.infrastructure.data_repository - INFO - データベーススキーマを初期化しました
2025-03-29 02:40:29,507 - src.service_factory - INFO - DataRepositoryを作成しました (cache_dir: /app/data, db_path: /app/data/db.sqlite)
2025-03-29 02:40:29,507 - src.service_factory - INFO - PitchAnalyzerを作成しました
2025-03-29 02:40:29,508 - src.service_factory - INFO - PitcherGameAnalysisUseCaseを作成しました
2025-03-29 02:40:29,508 - src.service_factory - INFO - PlotlyVisualizerを作成しました
2025-03-29 02:40:29,509 - src.service_factory - INFO - Plotlyベースのアプリケーションを作成しました
2025-03-29 02:40:29,509 - src.presentation.plotly_streamlit_app - INFO - Plotlyベースのアプリケーションを起動します
2025-03-29 02:40:29,515 - src.application.usecases - INFO - 投手ID 660271 の2023-07-14の試合を分析します
2025-03-29 02:40:29,519 - src.infrastructure.data_repository - INFO - 投手情報を取得しました: Shohei Ohtani (ID: 660271)
2025-03-29 02:40:29,524 - src.infrastructure.data_repository - INFO - キャッシュからデータを読み込みました: /app/data/pitch_data_660271_2023-07-14.pkl
2025-03-29 02:40:29,545 - src.application.usecases - INFO - 分析が正常に完了しました
2025-03-29 02:40:29,548 - src.presentation.plotly_visualizer - INFO - パフォーマンスサマリーグラフを作成（Plotly）
2025-03-29 02:40:29,616 - src.presentation.plotly_visualizer - INFO - 球種別分布グラフを作成（Plotly）
2025-03-29 02:40:29,634 - src.presentation.plotly_visualizer - INFO - イニング別球速グラフを作成（Plotly）
2025-03-29 02:40:29,660 - src.presentation.plotly_visualizer - INFO - イニング別投球分布グラフを作成（Plotly）
2025-03-29 02:40:29,678 - src.presentation.plotly_visualizer - INFO - 球種別有効性グラフを作成（Plotly）
2025-03-29 02:40:29,700 - src.presentation.plotly_visualizer - INFO - 被打球分布グラフを作成（Plotly）
